2025-08-30 09:21Z — Admin UI polish
- Products: removed category filter; table now has [Checkbox, Photo, Name, SKU, Category, Price (KWD), Active]
- SKU display shows short code (or PSN-###) instead of long IDs
- Added product thumbnails in table and medium preview in edit modal
- Thin table separators for a cleaner, organized look
- Categories: added optional Photo column; Category modal shows Products count (read-only)
- Wired edit/delete for rows and bulk delete

Next:
- Pushed feature/admin-ui-wiring and deployed to Cloud Run (pending below)
- Verify production at https://app.ordertech.me/products/ after deploy completes

dev_log — project activity log

IMPORTANT: SESSION LOGGING POLICY
- At the start of every session, append a new timestamped entry here and log EVERY action and command we run.
- This log is the single source of truth between sessions. Do not proceed without updating it.
- Use the format: "=== YYYY-MM-DDThh:mm:ssZ — short description ===" followed by bullet points.

Local Admin Token (dev) quickstart
- For local Admin endpoints without Firebase Admin:
  - export ADMIN_TOKEN=dev
  - npm start
- Open http://localhost:5050/products/?admin_token=dev
- To clear/override: run localStorage.removeItem('ADMIN_TOKEN') in the browser console, or visit with a different admin_token to overwrite.

=== 2025-08-30T07:06:47Z — Admin UI auth stability, prod deploy, dev token ===
- Admin UI: avoid login redirect loops by not hard-redirecting on 401 and by proceeding if an ID token exists in localStorage.
- Server: allow x-admin-token to bypass Firebase Admin auth locally when ADMIN_TOKEN matches (platform admin override).
- Deploy: gcloud run deploy smart-order --region=europe-west1 --source .
  - Service URL: https://smart-order-715493130630.europe-west1.run.app
  - Domain: app.ordertech.me → smart-order
- Platform admin: hussain@mosawi.com (in PLATFORM_ADMIN_EMAILS)

Session: 2025-08-30T06:47:34Z
Path: /Users/mosawi/datatech/ordertech
Shell: zsh 5.9 on macOS

Summary of actions in this session
- Wired Admin UI to backend (auth + API calls) and committed on a new branch.
- Verified Cloud Run EU production setup and custom domain mapping.
- Restarted local server; Admin login now serves correctly on localhost.

Cloud Run (EU) — production
- Project: smart-order-469705
- Region: europe-west1
- Service: smart-order
- Service URL: https://smart-order-64v5pfkeba-ew.a.run.app
- Custom domain mapping: app.ordertech.me → routeName smart-order (region europe-west1)
- Service env (non-sensitive summary):
  - PLATFORM_ADMIN_EMAILS = hussain@mosawi.com
  - REQUIRE_DB = 1 (DB required)
  - DATABASE_URL = from Secret Manager (value not logged)
  - PGPASSWORD = [redacted]

Repository changes
- Branch created (local): feature/admin-ui-wiring
- Edited: public/admin/admin.js
- Commit: "Admin UI: wire backend API and auth (tenants, metrics, devices, branches, domains, catalog)"

Admin UI wiring highlights
- Firebase auth bootstrap (redirect if signed-out; refresh/store ID token; optional admin_token URL param saved to localStorage).
- Centralized API helper injects: Authorization (ID token), x-admin-token (if present), x-tenant-id; robust error handling.
- Admin capability detection: tries /admin/tenants; falls back to /tenants for read-only.
- Panels wired:
  - Tenants: list/select/create (platform-admin)
  - Dashboard: brand + live metrics
  - Devices/licensing: list/revoke/delete, claim device, license limit
  - Branches: list/add/rename/delete, branch-limit
  - Domains: list/add/delete
  - Catalog: read categories/products with x-tenant-id; category filter
  - Posters: list cards
  - Display state: save banner/featured (requires auth + tenant admin)

Local status
- Server restarted; Admin login page:
- http://localhost:5050/login/ → 200 OK after restart
- Public endpoints available: /categories, /products

Next actions (owner)
- Push branch and open PR to main:
  - git remote add origin <YOUR_REPO_URL>
  - git push -u origin feature/admin-ui-wiring
  - gh pr create --fill --base main --head feature/admin-ui-wiring (optional)
- Ensure Firebase/Identity Platform Authorized domains include:
  - app.ordertech.me, and localhost (for local testing)
- Optional: serve Admin Firebase config dynamically via env on Cloud Run:
  - gcloud run services update smart-order \
      --region europe-west1 \
      --update-env-vars FIREBASE_API_KEY='{{API_KEY}}',FIREBASE_AUTH_DOMAIN='{{AUTH_DOMAIN}}'

Notes for future sessions
- Append new entries to this dev_log with a timestamped header like:
  === 2025-08-31T09:00:00Z — short description ===
  and list what changed, what we verified, and any pending actions.

=== 2025-08-30T09:30:35Z — Local DB via Cloud SQL Auth Proxy (best approach) ===
- Chosen approach: Use the Cloud SQL Auth Proxy locally so the Node server on localhost talks to the same Cloud SQL instance as Cloud Run, securely.
- Safety: Prefer a staging Cloud SQL instance for day-to-day development. If you must use production, use least-privileged DB roles and be careful when running admin actions.

Prereqs
- Access: your user or a service account must have roles/cloudsql.client on project smart-order-469705.
- CLI: gcloud configured and authenticated (gcloud auth login).
- Proxy: install via Homebrew: brew install cloud-sql-proxy (macOS).

Find your instance connection name
- This is PROJECT:REGION:INSTANCE, e.g. smart-order-469705:europe-west1:smart-order-pg
  gcloud sql instances list
  gcloud sql instances describe {{INSTANCE_NAME}} --format='value(connectionName)'

Run the proxy (local → Cloud SQL)
- Using your gcloud user creds (no key file):
  cloud-sql-proxy smart-order-469705:europe-west1:{{INSTANCE_NAME}} --port 5432
- Or with a service account key:
  cloud-sql-proxy smart-order-469705:europe-west1:{{INSTANCE_NAME}} --port 5432 --credentials-file=/path/to/service-account.json

Configure local env (do NOT inline secrets)
- Retrieve the DB password from Secret Manager and expose DATABASE_URL for the app:
  DB_USER={{DB_USER}}
  DB_NAME={{DB_NAME}}
  DB_PASS=$(gcloud secrets versions access latest --secret={{DB_PASSWORD_SECRET}})
  export DATABASE_URL="postgres://${DB_USER}:${DB_PASS}@127.0.0.1:5432/${DB_NAME}"
  export REQUIRE_DB=1

Run locally and verify
- Start server: npm start
- Health: curl -s http://localhost:5050/dbz → expect ok:true with db/time
- Now /categories and /products use the Cloud SQL data via the proxy.

Recommended roles
- Create a read-only DB role for browsing, and a separate constrained role for admin writes when needed.
- For routine dev, prefer a staging DB that mirrors prod schema/data.

Stop/disable
- Stop the proxy process (Ctrl+C) and unset DATABASE_URL/REQUIRE_DB to return to local/in-memory mode.

=== 2025-08-30T09:46:21Z — Started local server and proxy ===
- Created/updated Secret Manager secret: DB_PASSWORD (latest version added from Cloud Run env)
- Wrote scripts/dev_db.env with DB_USER, DB_NAME, DB_PASSWORD_SECRET=DB_PASSWORD, CONNECTION_NAME, PROXY_PORT=6543
- cloud-sql-proxy PID: running on 127.0.0.1:5432 for connection smart-order-469705:us-central1:smart-order-pg
- Local Node server started in background
  - PID printed in terminal, logs at .server.log
  - Health: http://localhost:5050/__health → OK-7
- Pending to fully use Cloud SQL from localhost:
  - Provide DB password via Secret Manager (recommended): set DB_PASSWORD_SECRET in scripts/dev_db.env and run `. scripts/dev_db.sh start`
  - Or provide DB_USER/DB_NAME explicitly and a password secret; the helper exports DATABASE_URL and PGPASSWORD safely.

=== 2025-08-30T09:39:56Z — One-time setup automated ===
- Generated scripts/dev_db.env.localtemplate prefilled with:
  - PROJECT_ID=smart-order-469705
  - REGION=europe-west1
  - CONNECTION_NAME=smart-order-469705:us-central1:smart-order-pg
  - DB_URL_SECRET=DATABASE_URL (pull full DB URL from Secret Manager; script rewrites host→127.0.0.1)
- Added scripts/dev_db.env to .gitignore (do not commit local config)
- Started Cloud SQL Auth Proxy locally on 127.0.0.1:5432 for connection smart-order-469705:us-central1:smart-order-pg
  - To stop: kill the process or run `. scripts/dev_db.sh stop` after creating your scripts/dev_db.env
- Note: local PostgreSQL listens on 5432; switched proxy to 6543 in scripts/dev_db.env (PROXY_PORT=6543)

=== 2025-08-30T09:35:39Z — Added scripts/dev_db.sh helper for Cloud SQL Proxy ===
- New helper: scripts/dev_db.sh (source this script to control proxy and env)
  - . scripts/dev_db.sh start    → starts the proxy and exports DATABASE_URL, REQUIRE_DB
  - . scripts/dev_db.sh stop     → stops the proxy and unsets env
  - . scripts/dev_db.sh status   → prints proxy/env status
  - . scripts/dev_db.sh help     → usage + config instructions
- Example config: scripts/dev_db.env.example (copy to scripts/dev_db.env and fill PROJECT_ID/REGION/INSTANCE/DB vars)
- Requirements: gcloud CLI, cloud-sql-proxy installed, roles/cloudsql.client access
- Notes: Uses Secret Manager to fetch DB password at runtime; keeps secrets out of files/console

=== 2025-08-30T13:52:28Z — Prod deploy (EU): Admin pages moved to root, UI refresh ===
- Context: Moved Admin pages from /public/admin to root; added Products, Categories, Modifiers HTML; updated links and UI.
- Target: Cloud Run service smart-order (region europe-west1); domain via HTTPS LB app.ordertech.me
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verify (after deploy):
  - Health: curl -s https://app.ordertech.me/health
  - Cloud SQL attachment (names only): gcloud run services describe smart-order --region=europe-west1 --format='value(spec.template.metadata.annotations.run.googleapis.com/cloudsql-instances)'
  - Env names: gcloud run services describe smart-order --region=europe-west1 --format='value(spec.template.spec.containers[0].env.name)'
- Firebase config served: curl -s https://app.ordertech.me/config.js | head -n 3
- Notes: Server sets no-cache headers for /public/admin; root pages should be served by express.static(PUB).

Results:
- Revision: smart-order-00032-fcn (100% traffic)
- Service URL: https://smart-order-64v5pfkeba-ew.a.run.app
- Health (LB): 200 OK
- Cloud SQL: smart-order-469705:us-central1:smart-order-pg (attached)
- Env names: PGPASSWORD; PLATFORM_ADMIN_EMAILS; REQUIRE_DB; DATABASE_URL
- UI routes (LB): /products 200, /categories 200, /modifiers/groups/ 200
- Firebase config (served): smart-order-469705.firebaseapp.com (apiKey present)

=== 2025-08-30T13:58:50Z — Fix row click to open editors (Products/Categories), redeploy ===
- Change: Make table rows clickable (not just name link) to open edit modals; ignore clicks on checkboxes/buttons.
- Files:
  - public/admin/js/products.js (added tr.row-click handler)
  - public/admin/js/categories.js (added tr.row-click handler)
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verify served JS contains row handlers:
  - products.js: grep "tr.row-click[data-pid]" → found
  - categories.js: grep "tr.row-click[data-cid]" → found
- Outcome: Clicking anywhere on a row (except controls) opens the editor modals.

=== 2025-08-30T14:04:10Z — Preserve modals in shell; shade collapsed menu; redeploy ===
- admin-shell: preserve .modal-backdrop nodes when rebuilding shell to keep modals functional on standalone pages
- style.css: add shading for collapsed menu headers (.menu-head[aria-expanded="false"]) for clearer state
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verified:
  - admin-shell.js contains modal preservation code
  - style.css contains collapsed header shading rule

=== 2025-08-30T14:10:44Z — Modal size + responsive adjustments; redeploy ===
- style.css: make modal smaller and adaptive (max-width clamp(420px, 70vw, 640px); max-height 90vh; content scroll); tweak padding and preview size on small screens
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verified served CSS includes the clamp/max-height rules

=== 2025-08-30T14:17:47Z — Products page size options (20/50/100), default 20, inline label; redeploy ===
- Updated products.html and products/index.html to render Page size beside dropdown with options 20, 50, 100 (default 20)
- Updated products.js default productsPageSize to 20
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verified live HTML shows the new options and selection

=== 2025-08-30T14:24:03Z — Page size label no-wrap, remove refresh, darker submenu on expand; redeploy ===
- products.html, products/index.html: remove Refresh button; make label no-wrap; keep options inline
- style.css: darken expanded submenu background (.menu-head[aria-expanded="true"] + .menu-body)
- Deploy:
  gcloud run deploy smart-order --source . --project=smart-order-469705 --region=europe-west1 --allow-unauthenticated
- Verified products page markup (no refresh button, inline label) and CSS change live

=== 2025-09-02T05:46:28Z — Auth: email-only login with verification; remove Google ===
- Login: Removed Google sign-in; added Create account and Resend verification; lazy Firebase init guards; handle verifyEmail oobCode; Enter key triggers sign-in.
- Server: Enforce verified emails for Admin API (REQUIRE_VERIFIED_EMAIL=1 by default; set 0 to disable locally).
- Local config: Set FIREBASE_API_KEY and FIREBASE_AUTH_DOMAIN before starting; verify http://localhost:5050/config.js returns non-empty values.
- Test: Sign up → open verification email → click link (lands back at /login) → sign in with email/password → redirect to /products/.
- Files: login/index.html, server.js
- Commit: 6b86939 on feature/admin-ui-wiring
- Note: Ensure Email/Password provider is enabled and 'localhost' is in Authorized domains.
