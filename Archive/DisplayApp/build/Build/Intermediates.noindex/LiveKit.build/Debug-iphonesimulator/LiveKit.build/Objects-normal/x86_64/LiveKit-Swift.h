// Generated by Apple Swift version 6.1.2 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef LIVEKIT_SWIFT_H
#define LIVEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import AVFoundation;
@import CoreFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import ReplayKit;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LiveKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_PROTOCOL("_TtP7LiveKit14CaptureOptions_")
@protocol CaptureOptions
@end

SWIFT_CLASS("_TtC7LiveKit19AudioCaptureOptions")
@interface AudioCaptureOptions : NSObject <CaptureOptions>
/// Whether to enable software (WebRTC’s) echo cancellation.
/// By default, Apple’s voice processing is already enabled.
/// See <code>AudioManager/isVoiceProcessingBypassed</code> for details.
@property (nonatomic, readonly) BOOL echoCancellation;
/// Whether to enable software (WebRTC’s) gain control.
/// By default, Apple’s gain control is already enabled.
/// See <code>AudioManager/isVoiceProcessingAGCEnabled</code> for details.
@property (nonatomic, readonly) BOOL autoGainControl;
@property (nonatomic, readonly) BOOL noiseSuppression;
@property (nonatomic, readonly) BOOL highpassFilter;
@property (nonatomic, readonly) BOOL typingNoiseDetection;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;
@class LKAudioBuffer;
/// Used to modify audio buffers before they are sent to the network or played to the user
SWIFT_PROTOCOL("_TtP7LiveKit29AudioCustomProcessingDelegate_")
@protocol AudioCustomProcessingDelegate
@optional
/// An optional identifier for the audio processor implementation.
/// This can be used to identify different types of audio processing (e.g. noise cancellation).
/// Generally you can leave this as the default value.
@property (nonatomic, readonly, copy) NSString * _Nonnull audioProcessingName;
@required
/// Provides the sample rate and number of channels to configure your delegate for processing
- (void)audioProcessingInitializeWithSampleRate:(NSInteger)sampleRateHz channels:(NSInteger)channels;
/// Provides a chunk of audio data that can be modified in place
- (void)audioProcessingProcessWithAudioBuffer:(LKAudioBuffer * _Nonnull)audioBuffer;
/// Called when the audio processing is no longer needed so it may clean up any resources
- (void)audioProcessingRelease;
@end

SWIFT_PROTOCOL("_TtP7LiveKit11MediaDevice_")
@protocol MediaDevice
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@end

SWIFT_CLASS("_TtC7LiveKit11AudioDevice")
@interface AudioDevice : NSObject <MediaDevice>
@property (nonatomic, readonly, copy) NSString * _Nonnull deviceId;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_PROTOCOL("_TtP7LiveKit13MediaEncoding_")
@protocol MediaEncoding
@property (nonatomic, readonly) NSInteger maxBitrate;
@end

SWIFT_CLASS("_TtC7LiveKit13AudioEncoding")
@interface AudioEncoding : NSObject <MediaEncoding>
@property (nonatomic, readonly) NSInteger maxBitrate;
- (nonnull instancetype)initWithMaxBitrate:(NSInteger)maxBitrate OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface AudioEncoding (SWIFT_EXTENSION(LiveKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetTelephone;)
+ (AudioEncoding * _Nonnull)presetTelephone SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetSpeech;)
+ (AudioEncoding * _Nonnull)presetSpeech SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetMusic;)
+ (AudioEncoding * _Nonnull)presetMusic SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetMusicStereo;)
+ (AudioEncoding * _Nonnull)presetMusicStereo SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetMusicHighQuality;)
+ (AudioEncoding * _Nonnull)presetMusicHighQuality SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) AudioEncoding * _Nonnull presetMusicHighQualityStereo;)
+ (AudioEncoding * _Nonnull)presetMusicHighQualityStereo SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7LiveKit10Statistics")
@interface Statistics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit22AudioPlayoutStatistics")
@interface AudioPlayoutStatistics : Statistics
@end

/// Base protocol for <code>DataPublishOptions</code> and <code>MediaPublishOptions</code>.
SWIFT_PROTOCOL("_TtP7LiveKit14PublishOptions_")
@protocol PublishOptions
@end

/// Base protocol for both <code>VideoPublishOptions</code> and <code>AudioPublishOptions</code>.
SWIFT_PROTOCOL("_TtP7LiveKit19TrackPublishOptions_")
@protocol TrackPublishOptions <PublishOptions>
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Set stream name for the track. Audio and video tracks with the same stream name
/// will be placed in the same <code>MediaStream</code> and offer better synchronization.
/// By default, camera and microphone will be placed in a stream; as would screen_share and screen_share_audio
@property (nonatomic, readonly, copy) NSString * _Nullable streamName;
@end

SWIFT_CLASS("_TtC7LiveKit19AudioPublishOptions")
@interface AudioPublishOptions : NSObject <TrackPublishOptions>
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// preferred encoding parameters
@property (nonatomic, readonly, strong) AudioEncoding * _Nullable encoding;
@property (nonatomic, readonly) BOOL dtx;
@property (nonatomic, readonly) BOOL red;
@property (nonatomic, readonly, copy) NSString * _Nullable streamName;
@property (nonatomic, readonly) BOOL preConnect;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioPCMBuffer;
/// Used to observe audio buffers before playback, e.g. for visualization, recording, etc
/// note:
/// AudioRenderer is not suitable for buffer modification. If you need to modify the buffer, use <code>AudioCustomProcessingDelegate</code> instead.
SWIFT_PROTOCOL("_TtP7LiveKit13AudioRenderer_")
@protocol AudioRenderer
- (void)renderWithPcmBuffer:(AVAudioPCMBuffer * _Nonnull)pcmBuffer;
@end

SWIFT_CLASS("_TtC7LiveKit25AudioSessionConfiguration")
@interface AudioSessionConfiguration : NSObject
@property (nonatomic, readonly) AVAudioSessionCategory _Nonnull category;
@property (nonatomic, readonly) AVAudioSessionCategoryOptions categoryOptions;
@property (nonatomic, readonly) AVAudioSessionMode _Nonnull mode;
- (nonnull instancetype)initWithCategory:(AVAudioSessionCategory _Nonnull)category categoryOptions:(AVAudioSessionCategoryOptions)categoryOptions mode:(AVAudioSessionMode _Nonnull)mode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@interface AudioSessionConfiguration (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

SWIFT_CLASS("_TtC7LiveKit21MediaSourceStatistics")
@interface MediaSourceStatistics : Statistics
@end

SWIFT_CLASS("_TtC7LiveKit21AudioSourceStatistics")
@interface AudioSourceStatistics : MediaSourceStatistics
@end

SWIFT_PROTOCOL("_TtP7LiveKit10AudioTrack_")
@protocol AudioTrack
- (void)addAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
- (void)removeAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
@end

@class VideoFrame;
SWIFT_PROTOCOL("_TtP7LiveKit14VideoProcessor_")
@protocol VideoProcessor
- (VideoFrame * _Nullable)processWithFrame:(VideoFrame * _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
@end

/// A <code>VideoProcessor</code> that blurs the background of a video stream.
/// This processor uses Vision framework to generate a mask of the person in the video stream,
/// downscales the background, applies a blur, and then blends it back with the foreground.
/// important:
/// This class is not thread safe and will be called on a dedicated serial <code>processingQueue</code>.
SWIFT_CLASS("_TtC7LiveKit28BackgroundBlurVideoProcessor") SWIFT_AVAILABILITY(visionos,introduced=1.0) SWIFT_AVAILABILITY(tvos,introduced=15.0) SWIFT_AVAILABILITY(macos,introduced=12.0) SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface BackgroundBlurVideoProcessor : NSObject <VideoProcessor>
- (VideoFrame * _Nullable)processWithFrame:(VideoFrame * _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class KeyProviderOptions;
SWIFT_CLASS("_TtC7LiveKit15BaseKeyProvider")
@interface BaseKeyProvider : NSObject
@property (nonatomic, readonly, strong) KeyProviderOptions * _Nonnull options;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// A delegate protocol for receiving updates about the broadcast state.
SWIFT_PROTOCOL("_TtP7LiveKit24BroadcastManagerDelegate_")
@protocol BroadcastManagerDelegate
/// Invoked when the broadcast state changes.
/// \param isBroadcasting A Boolean value indicating whether a broadcast is currently in progress.
///
- (void)broadcastManagerWithDidChangeState:(BOOL)isBroadcasting;
@end

@class Dimensions;
SWIFT_PROTOCOL("_TtP7LiveKit19VideoCaptureOptions_")
@protocol VideoCaptureOptions <CaptureOptions>
@property (nonatomic, readonly, strong) Dimensions * _Nonnull dimensions;
@property (nonatomic, readonly) NSInteger fps;
@end

SWIFT_CLASS("_TtC7LiveKit20BufferCaptureOptions")
@interface BufferCaptureOptions : NSObject <VideoCaptureOptions>
@property (nonatomic, readonly, strong) Dimensions * _Nonnull dimensions;
@property (nonatomic, readonly) NSInteger fps;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit13VideoCapturer")
@interface VideoCapturer : NSObject
/// Requests video capturer to start generating frames. <code>Track/start()-dk8x</code> calls this automatically.
/// <code>startCapture()</code> and <code>stopCapture()</code> calls must be balanced. For example, if <code>startCapture()</code> is called 2 times, <code>stopCapture()</code> must be called 2 times also.
/// Returns true when capturing should start, returns fals if capturing already started.
- (void)startCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Requests video capturer to stop generating frames. <code>Track/stop()-6jeq0</code> calls this automatically.
/// See <code>startCapture()</code> for more details.
/// Returns true when capturing should stop, returns fals if capturing already stopped.
- (void)stopCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (void)restartCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, CapturerState, closed) {
  CapturerStateStopped = 0,
  CapturerStateStarted = 1,
};

/// A <code>VideoCapturer</code> that can capture <code>CMSampleBuffer</code>s.
/// Repeatedly call <code>capture(_:)</code> to capture a stream of <code>CMSampleBuffer</code>s.
/// The pixel format must be one of <code>VideoCapturer/supportedPixelFormats</code>. If an unsupported pixel format is used, the SDK will skip the capture.
/// <code>BufferCapturer</code> can be used to provide video buffers from ReplayKit.
/// <blockquote>
/// Note: At least one frame must be captured before publishing the track or the publish will timeout,
/// since dimensions must be resolved at the time of publishing (to compute video parameters).
///
/// </blockquote>
SWIFT_CLASS("_TtC7LiveKit14BufferCapturer")
@interface BufferCapturer : VideoCapturer
@end

@class NSDate;
/// Information about a byte data stream.
SWIFT_CLASS("_TtC7LiveKit14ByteStreamInfo")
@interface ByteStreamInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull topic;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
/// The MIME type of the stream data.
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
/// The name of the file being sent.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
/// An asynchronous sequence of chunks read from a byte data stream.
SWIFT_CLASS("_TtC7LiveKit16ByteStreamReader")
@interface ByteStreamReader : NSObject
/// Information about the incoming byte stream.
@property (nonatomic, readonly, strong) ByteStreamInfo * _Nonnull info;
/// Reads incoming chunks from the byte stream, concatenating them into a single data object which is returned
/// once the stream closes normally.
///
/// throws:
/// <code>StreamError</code> if an error occurs while reading the stream.
///
/// returns:
/// The data consisting of all concatenated chunks.
- (void)readAllWithCompletionHandler:(void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface ByteStreamReader (SWIFT_EXTENSION(LiveKit))
- (void)readChunksOnChunk:(void (^ _Nonnull)(NSData * _Nonnull))onChunk onCompletion:(void (^ _Nullable)(NSError * _Nullable))onCompletion SWIFT_DEPRECATED_MSG("Use for/await on ByteStreamReader reader instead.");
@end

@class NSURL;
@interface ByteStreamReader (SWIFT_EXTENSION(LiveKit))
/// Reads incoming chunks from the byte stream, writing them to a file as they are received.
/// \param directory The directory to write the file in. The system temporary directory is used if not specified.
///
/// \param nameOverride The name to use for the written file. If not specified, file name and extension will be automatically
/// inferred from the stream information.
///
///
/// throws:
/// <code>StreamError</code> if an error occurs while reading the stream.
///
/// returns:
/// The URL of the written file on disk.
- (void)writeToFileIn:(NSURL * _Nonnull)directory name:(NSString * _Nullable)nameOverride completionHandler:(void (^ _Nonnull)(NSURL * _Nullable, NSError * _Nullable))completionHandler;
@end

/// Asynchronously write to an open byte stream.
SWIFT_CLASS("_TtC7LiveKit16ByteStreamWriter")
@interface ByteStreamWriter : NSObject
/// Information about the outgoing byte stream.
@property (nonatomic, readonly, strong) ByteStreamInfo * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface ByteStreamWriter (SWIFT_EXTENSION(LiveKit))
- (void)write:(NSData * _Nonnull)data completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_UNAVAILABLE_MSG("Use async write(_:) method instead.");
- (void)closeWithReason:(NSString * _Nullable)reason completion:(void (^ _Nonnull)(NSError * _Nullable))completion SWIFT_UNAVAILABLE_MSG("Use async close(reason:) method instead.");
@end

@class AVCaptureDevice;
@class AVCaptureDeviceFormat;
SWIFT_CLASS("_TtC7LiveKit20CameraCaptureOptions")
@interface CameraCaptureOptions : NSObject <VideoCaptureOptions>
/// Preferred deviceType to use. If <code>device</code> is specified, it will be used instead. This is currently ignored for visionOS.
@property (nonatomic, readonly) AVCaptureDeviceType _Nullable deviceType;
/// Exact devce to use.
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable device;
/// Preferred position such as <code>.front</code> or <code>.back</code>.
@property (nonatomic, readonly) AVCaptureDevicePosition position;
@property (nonatomic, readonly, strong) AVCaptureDeviceFormat * _Nullable preferredFormat;
/// preferred dimensions for capturing, the SDK may override with a recommended value.
@property (nonatomic, readonly, strong) Dimensions * _Nonnull dimensions;
/// preferred fps to use for capturing, the SDK may override with a recommended value.
@property (nonatomic, readonly) NSInteger fps;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDeviceType:(AVCaptureDeviceType _Nullable)deviceType device:(AVCaptureDevice * _Nullable)device position:(AVCaptureDevicePosition)position preferredFormat:(AVCaptureDeviceFormat * _Nullable)preferredFormat dimensions:(Dimensions * _Nonnull)dimensions fps:(NSInteger)fps OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

SWIFT_CLASS("_TtC7LiveKit14CameraCapturer")
@interface CameraCapturer : VideoCapturer
/// Current device used for capturing
@property (nonatomic, readonly, strong) AVCaptureDevice * _Nullable device;
@property (nonatomic, readonly, strong) CameraCaptureOptions * _Nonnull options;
+ (void)captureDevicesWithCompletionHandler:(void (^ _Nonnull)(NSArray<AVCaptureDevice *> * _Nullable, NSError * _Nullable))completionHandler;
/// Checks whether both front and back capturing devices exist, and can be switched.
+ (void)canSwitchPositionWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Switches the camera position between <code>.front</code> and <code>.back</code> if supported by the device.
- (void)switchCameraPositionWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Sets the camera’s position to <code>.front</code> or <code>.back</code> when supported.
- (void)setWithCameraPosition:(AVCaptureDevicePosition)position completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Sets new options at runtime and resstarts capturing.
- (void)setWithOptions:(CameraCaptureOptions * _Nonnull)newOptions completionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (void)startCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (void)stopCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC7LiveKit21CertificateStatistics")
@interface CertificateStatistics : Statistics
@end

SWIFT_CLASS("_TtC7LiveKit15CodecStatistics")
@interface CodecStatistics : Statistics
@end

@class IceServer;
enum IceTransportPolicy : NSInteger;
enum ProtocolVersion : NSInteger;
/// Options used when establishing a connection.
SWIFT_CLASS("_TtC7LiveKit14ConnectOptions")
@interface ConnectOptions : NSObject
/// Automatically subscribe to <code>RemoteParticipant</code>’s tracks.
/// Defaults to true.
@property (nonatomic, readonly) BOOL autoSubscribe;
/// The number of attempts to reconnect when the network disconnects.
@property (nonatomic, readonly) NSInteger reconnectAttempts;
/// The minimum delay value for reconnection attempts.
/// Default is 0.3 seconds (TimeInterval.defaultReconnectDelay).
/// This value serves as the starting point for the easeOutCirc reconnection curve.
/// See <code>reconnectMaxDelay</code> for more details on how the reconnection delay is calculated.
@property (nonatomic, readonly) NSTimeInterval reconnectAttemptDelay;
/// The maximum delay between reconnect attempts.
/// Default is 7 seconds (TimeInterval.defaultReconnectMaxDelay).
/// The reconnection delay uses an “easeOutCirc” curve between reconnectAttemptDelay and reconnectMaxDelay:
/// <ul>
///   <li>
///     For all attempts except the last, the delay follows this curve
///   </li>
///   <li>
///     The curve grows rapidly at first and then more gradually approaches the maximum
///   </li>
///   <li>
///     The last attempt always uses exactly reconnectMaxDelay
///   </li>
/// </ul>
/// Example for 10 reconnection attempts with baseDelay=0.3s and maxDelay=7s:
/// <ul>
///   <li>
///     Attempt 0: ~0.85s (already 12% of the way to max)
///   </li>
///   <li>
///     Attempt 1: ~2.2s (30% of the way to max)
///   </li>
///   <li>
///     Attempt 2: ~3.4s (45% of the way to max)
///   </li>
///   <li>
///     Attempt 5: ~5.9s (82% of the way to max)
///   </li>
///   <li>
///     Attempt 9: 7.0s (exactly maxDelay)
///   </li>
/// </ul>
/// This approach provides larger delays early in the reconnection sequence to reduce
/// unnecessary network traffic when connections are likely to fail.
@property (nonatomic, readonly) NSTimeInterval reconnectMaxDelay;
/// The timeout interval for the initial websocket connection.
@property (nonatomic, readonly) NSTimeInterval socketConnectTimeoutInterval;
@property (nonatomic, readonly) NSTimeInterval primaryTransportConnectTimeout;
@property (nonatomic, readonly) NSTimeInterval publisherTransportConnectTimeout;
/// Custom ice servers
@property (nonatomic, readonly, copy) NSArray<IceServer *> * _Nonnull iceServers;
@property (nonatomic, readonly) enum IceTransportPolicy iceTransportPolicy;
/// Enable microphone concurrently while connecting.
@property (nonatomic, readonly) BOOL enableMicrophone;
/// LiveKit server protocol version to use. Generally, it’s not recommended to change this.
@property (nonatomic, readonly) enum ProtocolVersion protocolVersion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithAutoSubscribe:(BOOL)autoSubscribe reconnectAttempts:(NSInteger)reconnectAttempts reconnectAttemptDelay:(NSTimeInterval)reconnectAttemptDelay reconnectMaxDelay:(NSTimeInterval)reconnectMaxDelay socketConnectTimeoutInterval:(NSTimeInterval)socketConnectTimeoutInterval primaryTransportConnectTimeout:(NSTimeInterval)primaryTransportConnectTimeout publisherTransportConnectTimeout:(NSTimeInterval)publisherTransportConnectTimeout iceServers:(NSArray<IceServer *> * _Nonnull)iceServers iceTransportPolicy:(enum IceTransportPolicy)iceTransportPolicy enableMicrophone:(BOOL)enableMicrophone protocolVersion:(enum ProtocolVersion)protocolVersion OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

typedef SWIFT_ENUM(NSInteger, ConnectionQuality, closed) {
  ConnectionQualityUnknown = 0,
/// Indicates that a participant has temporarily (or permanently) lost connection to LiveKit.
/// For permanent disconnection, <code>RoomDelegate/room(_:participantDidLeave:)</code> will be invoked after a timeout.
  ConnectionQualityLost = 1,
  ConnectionQualityPoor = 2,
  ConnectionQualityGood = 3,
  ConnectionQualityExcellent = 4,
};

typedef SWIFT_ENUM(NSInteger, ConnectionState, closed) {
  ConnectionStateDisconnected = 0,
  ConnectionStateConnecting = 1,
  ConnectionStateReconnecting = 2,
  ConnectionStateConnected = 3,
};

SWIFT_CLASS("_TtC7LiveKit21DataChannelStatistics")
@interface DataChannelStatistics : Statistics
@end

@class ParticipantIdentity;
SWIFT_CLASS("_TtC7LiveKit18DataPublishOptions")
@interface DataPublishOptions : NSObject <PublishOptions>
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// The identities of participants who will receive the message, will be sent to every one if empty.
@property (nonatomic, readonly, copy) NSArray<ParticipantIdentity *> * _Nonnull destinationIdentities;
/// The topic under which the message gets published.
@property (nonatomic, readonly, copy) NSString * _Nullable topic;
/// Whether to send this as reliable or lossy.
/// For data that you need delivery guarantee (such as chat messages) set to true (reliable).
/// For data that should arrive as quickly as possible, but you are ok with dropped packets, set to false (lossy).
@property (nonatomic, readonly) BOOL reliable;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DegradationPreference, closed) {
/// The SDK will decide which preference is suitable or will use WebRTC’s default implementation.
  DegradationPreferenceAuto = 0,
  DegradationPreferenceDisabled = 1,
/// Prefer to maintain FPS rather than resolution.
  DegradationPreferenceMaintainFramerate = 2,
/// Prefer to maintain resolution rather than FPS.
  DegradationPreferenceMaintainResolution = 3,
  DegradationPreferenceBalanced = 4,
};

SWIFT_CLASS("_TtC7LiveKit10Dimensions")
@interface Dimensions : NSObject
@property (nonatomic, readonly) int32_t width;
@property (nonatomic, readonly) int32_t height;
- (nonnull instancetype)initWithWidth:(int32_t)width height:(int32_t)height OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface Dimensions (SWIFT_EXTENSION(LiveKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h90_169;)
+ (Dimensions * _Nonnull)h90_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h180_169;)
+ (Dimensions * _Nonnull)h180_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h216_169;)
+ (Dimensions * _Nonnull)h216_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h360_169;)
+ (Dimensions * _Nonnull)h360_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h540_169;)
+ (Dimensions * _Nonnull)h540_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h720_169;)
+ (Dimensions * _Nonnull)h720_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h1080_169;)
+ (Dimensions * _Nonnull)h1080_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h1440_169;)
+ (Dimensions * _Nonnull)h1440_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h2160_169;)
+ (Dimensions * _Nonnull)h2160_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h120_43;)
+ (Dimensions * _Nonnull)h120_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h180_43;)
+ (Dimensions * _Nonnull)h180_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h240_43;)
+ (Dimensions * _Nonnull)h240_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h360_43;)
+ (Dimensions * _Nonnull)h360_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h480_43;)
+ (Dimensions * _Nonnull)h480_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h540_43;)
+ (Dimensions * _Nonnull)h540_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h720_43;)
+ (Dimensions * _Nonnull)h720_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h1080_43;)
+ (Dimensions * _Nonnull)h1080_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Dimensions * _Nonnull h1440_43;)
+ (Dimensions * _Nonnull)h1440_43 SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7LiveKit11E2EEManager")
@interface E2EEManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Room;
enum ReconnectMode : NSInteger;
@class LiveKitError;
@class RemoteParticipant;
@class Participant;
enum ParticipantState : NSInteger;
@class ParticipantPermissions;
@class TrackPublication;
@class TranscriptionSegment;
@class LocalParticipant;
@class LocalTrackPublication;
@class RemoteTrackPublication;
@class TrackSid;
enum E2EEState : NSInteger;
enum StreamState : NSInteger;
@class Track;
/// <code>RoomDelegate</code> receives room events as well as <code>Participant</code> events.
/// <blockquote>
/// Important: The thread which the delegate will be called on, is not guranteed to be the <code>main</code> thread.
/// If you will perform any UI update from the delegate, ensure the execution is from the <code>main</code> thread.
///
/// </blockquote>
/// <h2>Example usage</h2>
/// \code
/// func room(_ room: Room, localParticipant: LocalParticipant, didPublish publication: LocalTrackPublication) {
///   DispatchQueue.main.async {
///     // update UI here
///     self.localVideoView.isHidden = false
///   }
/// }
///
/// \endcodeSee the source code of <a href="https://github.com/livekit/client-example-swift">Swift Example App</a> for more examples.
SWIFT_PROTOCOL("_TtP7LiveKit12RoomDelegate_")
@protocol RoomDelegate
@optional
/// <code>Room/connectionState</code> has updated.
/// note:
/// This method is not called for <code>ReconnectMode/quick</code>, use <code>RoomDelegate/room(_:didUpdateReconnectMode:)</code> instead.
- (void)room:(Room * _Nonnull)room didUpdateConnectionState:(enum ConnectionState)connectionState from:(enum ConnectionState)oldConnectionState;
/// Successfully connected to the room.
- (void)roomDidConnect:(Room * _Nonnull)room;
/// Previously connected to room but re-attempting to connect due to network issues.
/// note:
/// This method is not called for <code>ReconnectMode/quick</code>, use <code>RoomDelegate/room(_:didUpdateReconnectMode:)</code> instead.
- (void)roomIsReconnecting:(Room * _Nonnull)room;
/// Successfully re-connected to the room.
- (void)roomDidReconnect:(Room * _Nonnull)room;
/// <code>Room</code> reconnect mode has updated.
- (void)room:(Room * _Nonnull)room didUpdateReconnectMode:(enum ReconnectMode)reconnectMode;
/// Could not connect to the room. Only triggered when the initial connect attempt fails.
- (void)room:(Room * _Nonnull)room didFailToConnectWithError:(LiveKitError * _Nullable)error;
/// Client disconnected from the room unexpectedly after a successful connection.
- (void)room:(Room * _Nonnull)room didDisconnectWithError:(LiveKitError * _Nullable)error;
/// <code>Room/metadata</code> has updated.
- (void)room:(Room * _Nonnull)room didUpdateMetadata:(NSString * _Nullable)metadata;
/// <code>Room/isRecording</code> has updated.
- (void)room:(Room * _Nonnull)room didUpdateIsRecording:(BOOL)isRecording;
/// A <code>RemoteParticipant</code> joined the room.
- (void)room:(Room * _Nonnull)room participantDidConnect:(RemoteParticipant * _Nonnull)participant;
/// A <code>RemoteParticipant</code> left the room.
- (void)room:(Room * _Nonnull)room participantDidDisconnect:(RemoteParticipant * _Nonnull)participant;
/// Speakers in the room has updated.
- (void)room:(Room * _Nonnull)room didUpdateSpeakingParticipants:(NSArray<Participant *> * _Nonnull)participants;
/// <code>Participant/metadata</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateMetadata:(NSString * _Nullable)metadata;
/// <code>Participant/name</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateName:(NSString * _Nonnull)name;
/// <code>Participant/state</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateState:(enum ParticipantState)state;
/// <code>Participant/connectionQuality</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateConnectionQuality:(enum ConnectionQuality)quality;
/// <code>Participant/permissions</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdatePermissions:(ParticipantPermissions * _Nonnull)permissions;
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
/// Received transcription segments.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant trackPublication:(TrackPublication * _Nonnull)trackPublication didReceiveTranscriptionSegments:(NSArray<TranscriptionSegment *> * _Nonnull)segments;
/// The <code>LocalParticipant</code> has published a <code>LocalTrack</code>.
- (void)room:(Room * _Nonnull)room localParticipant:(LocalParticipant * _Nonnull)participant didPublishTrack:(LocalTrackPublication * _Nonnull)publication;
/// A <code>RemoteParticipant</code> has published a <code>RemoteTrack</code>.
- (void)room:(Room * _Nonnull)room remoteParticipant:(RemoteParticipant * _Nonnull)participant didPublishTrack:(RemoteTrackPublication * _Nonnull)publication;
/// The <code>LocalParticipant</code> has un-published a <code>LocalTrack</code>.
- (void)room:(Room * _Nonnull)room localParticipant:(LocalParticipant * _Nonnull)participant didUnpublishTrack:(LocalTrackPublication * _Nonnull)publication;
/// Fired when the first remote participant has subscribed to the localParticipant’s track.
- (void)room:(Room * _Nonnull)room localParticipant:(LocalParticipant * _Nonnull)participant remoteDidSubscribeTrack:(LocalTrackPublication * _Nonnull)publication;
/// A <code>RemoteParticipant</code> has un-published a <code>RemoteTrack</code>.
- (void)room:(Room * _Nonnull)room remoteParticipant:(RemoteParticipant * _Nonnull)participant didUnpublishTrack:(RemoteTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didSubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didUnsubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didFailToSubscribeTrackWithSid:(TrackSid * _Nonnull)trackSid error:(LiveKitError * _Nonnull)error;
/// Received data from from a user or server. <code>participant</code> will be nil if broadcasted from server.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nullable)participant didReceiveData:(NSData * _Nonnull)data forTopic:(NSString * _Nonnull)topic;
- (void)room:(Room * _Nonnull)room trackPublication:(TrackPublication * _Nonnull)trackPublication didUpdateE2EEState:(enum E2EEState)state;
/// <code>TrackPublication/isMuted</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant trackPublication:(TrackPublication * _Nonnull)trackPublication didUpdateIsMuted:(BOOL)isMuted;
/// <code>TrackPublication/streamState</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant trackPublication:(RemoteTrackPublication * _Nonnull)trackPublication didUpdateStreamState:(enum StreamState)streamState;
/// <code>RemoteTrackPublication/isSubscriptionAllowed</code> has updated.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant trackPublication:(RemoteTrackPublication * _Nonnull)trackPublication didUpdateIsSubscriptionAllowed:(BOOL)isSubscriptionAllowed;
/// Renamed to <code>RoomDelegate/room(_:didUpdateConnectionState:from:)</code>.
- (void)room:(Room * _Nonnull)room didUpdateConnectionState:(enum ConnectionState)connectionState oldConnectionState:(enum ConnectionState)oldValue SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didUpdateConnectionState:from:'");
/// Renamed to <code>RoomDelegate/roomDidConnect(_:)</code>.
- (void)room:(Room * _Nonnull)room didConnectIsReconnect:(BOOL)isReconnect SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'roomDidConnect:'");
/// Renamed to <code>RoomDelegate/room(_:didFailToConnectWithError:)</code>.
- (void)room:(Room * _Nonnull)room didFailToConnect:(NSError * _Nonnull)error SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didFailToConnectWithError:'");
/// Renamed to <code>RoomDelegate/room(_:didDisconnectWithError:)</code>.
- (void)room:(Room * _Nonnull)room didDisconnect:(NSError * _Nullable)error SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didDisconnectWithError:'");
/// Renamed to <code>RoomDelegate/room(_:participantDidConnect:)</code>.
- (void)room:(Room * _Nonnull)room participantDidJoin:(RemoteParticipant * _Nonnull)participant SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participantDidConnect:'");
/// Renamed to <code>RoomDelegate/room(_:participantDidDisconnect:)</code>.
- (void)room:(Room * _Nonnull)room participantDidLeave:(RemoteParticipant * _Nonnull)participant SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participantDidDisconnect:'");
/// Renamed to <code>RoomDelegate/room(_:didUpdateSpeakingParticipants:)</code>.
- (void)room:(Room * _Nonnull)room didUpdateSpeakers:(NSArray<Participant *> * _Nonnull)speakers SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didUpdateSpeakingParticipants:'");
/// Renamed to <code>RoomDelegate/room(_:didUpdateMetadata:)</code>.
- (void)room:(Room * _Nonnull)room didUpdateMetadata_:(NSString * _Nullable)metadata SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didUpdateMetadata:'");
/// Renamed to <code>RoomDelegate/room(_:didUpdateIsRecording:)</code>.
- (void)room:(Room * _Nonnull)room didUpdateIsRecording_:(BOOL)isRecording SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:didUpdateIsRecording:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUpdateMetadata:)</code>.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateMetadata_:(NSString * _Nullable)metadata SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didUpdateMetadata:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUpdateConnectionQuality:)</code>.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateConnectionQuality_:(enum ConnectionQuality)connectionQuality SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didUpdateConnectionQuality:'");
/// Renamed to <code>RoomDelegate/room(_:participant:trackPublication:didUpdateIsMuted:)</code>.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant publication:(TrackPublication * _Nonnull)publication didUpdateMuted:(BOOL)muted SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:trackPublication:didUpdateIsMuted:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUpdatePermissions:)</code>.
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdatePermissions_:(ParticipantPermissions * _Nonnull)permissions SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didUpdatePermissions:'");
/// Renamed to <code>RoomDelegate/room(_:participant:trackPublication:didUpdateStreamState:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant publication:(RemoteTrackPublication * _Nonnull)publication didUpdateStreamState:(enum StreamState)streamState SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:trackPublication:didUpdateStreamState:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didPublishTrack:)-418lx</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didPublishPublication:(RemoteTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:remoteParticipant:didPublishTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUnpublishTrack:)-1jsz8</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didUnpublishPublication:(RemoteTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:remoteParticipant:didUnpublishTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didSubscribeTrack:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didSubscribePublication:(RemoteTrackPublication * _Nonnull)publication track:(Track * _Nonnull)track SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didSubscribeTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didFailToSubscribeTrack:withError:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didFailToSubscribe:(NSString * _Nonnull)trackSid error:(NSError * _Nonnull)error SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room(_:participant:didFailToSubscribeTrack:withError:)'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUnsubscribeTrack:)</code>.
- (void)room:(Room * _Nonnull)room publication:(RemoteParticipant * _Nonnull)participant didUnsubscribePublication:(RemoteTrackPublication * _Nonnull)publication track:(Track * _Nonnull)track SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didUnsubscribeTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didReceiveData:forTopic:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nullable)participant didReceiveData:(NSData * _Nonnull)data SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didReceiveData:forTopic:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didReceiveData:forTopic:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nullable)participant didReceiveData:(NSData * _Nonnull)data topic:(NSString * _Nonnull)topic SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didReceiveData:forTopic:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didPublishTrack:)-8xoph</code>.
- (void)room:(Room * _Nonnull)room localParticipant:(LocalParticipant * _Nonnull)localParticipant didPublishPublication:(LocalTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:localParticipant:didPublishTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUnpublishTrack:)-4r2nn</code>.
- (void)room:(Room * _Nonnull)room localParticipant:(LocalParticipant * _Nonnull)localParticipant didUnpublishPublication:(LocalTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:localParticipant:didUnpublishTrack:'");
/// Renamed to <code>RoomDelegate/room(_:participant:didUpdatePermissions:)</code>.
- (void)room:(Room * _Nonnull)room participant:(RemoteParticipant * _Nonnull)participant didUpdate:(RemoteTrackPublication * _Nonnull)publication permission:(BOOL)allowed SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:participant:didUpdatePermissions:'");
/// Renamed to <code>RoomDelegate/room(_:trackPublication:didUpdateE2EEState:)</code>.
- (void)room:(Room * _Nonnull)room publication:(TrackPublication * _Nonnull)publication didUpdateE2EEState:(enum E2EEState)didUpdateE2EEState SWIFT_UNAVAILABLE_MSG("'room' has been renamed to 'room:trackPublication:didUpdateE2EEState:'");
@end

@interface E2EEManager (SWIFT_EXTENSION(LiveKit)) <RoomDelegate>
- (void)room:(Room * _Nonnull)_ localParticipant:(LocalParticipant * _Nonnull)participant didPublishTrack:(LocalTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)_ localParticipant:(LocalParticipant * _Nonnull)participant didUnpublishTrack:(LocalTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)_ participant:(RemoteParticipant * _Nonnull)participant didSubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
- (void)room:(Room * _Nonnull)_ participant:(RemoteParticipant * _Nonnull)participant didUnsubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
@end

enum EncryptionType : NSInteger;
SWIFT_CLASS("_TtC7LiveKit11E2EEOptions")
@interface E2EEOptions : NSObject
@property (nonatomic, readonly, strong) BaseKeyProvider * _Nonnull keyProvider;
@property (nonatomic, readonly) enum EncryptionType encryptionType;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, E2EEState, closed) {
  E2EEStateNew = 0,
  E2EEStateOk = 1,
  E2EEStateKey_ratcheted = 2,
  E2EEStateMissing_key = 3,
  E2EEStateEncryption_failed = 4,
  E2EEStateDecryption_failed = 5,
  E2EEStateInternal_error = 6,
};

typedef SWIFT_ENUM(NSInteger, EncryptionType, closed) {
  EncryptionTypeNone = 0,
  EncryptionTypeGcm = 1,
  EncryptionTypeCustom = 2,
};

SWIFT_CLASS("_TtC7LiveKit26IceCandidatePairStatistics")
@interface IceCandidatePairStatistics : Statistics
@end

SWIFT_CLASS("_TtC7LiveKit22IceCandidateStatistics")
@interface IceCandidateStatistics : Statistics
@end

/// Options used when establishing a connection.
SWIFT_CLASS("_TtC7LiveKit9IceServer")
@interface IceServer : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, IceTransportPolicy, closed) {
  IceTransportPolicyNone = 0,
  IceTransportPolicyRelay = 1,
  IceTransportPolicyNoHost = 2,
  IceTransportPolicyAll = 3,
};

SWIFT_CLASS("_TtC7LiveKit19InAppScreenCapturer") SWIFT_AVAILABILITY(ios,introduced=11.0) SWIFT_AVAILABILITY(macos,introduced=11.0)
@interface InAppScreenCapturer : VideoCapturer
- (void)startCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
- (void)stopCaptureWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC7LiveKit19RtpStreamStatistics")
@interface RtpStreamStatistics : Statistics
@end

SWIFT_CLASS("_TtC7LiveKit27ReceivedRtpStreamStatistics")
@interface ReceivedRtpStreamStatistics : RtpStreamStatistics
@end

SWIFT_CLASS("_TtC7LiveKit26InboundRtpStreamStatistics")
@interface InboundRtpStreamStatistics : ReceivedRtpStreamStatistics
@end

SWIFT_CLASS("_TtC7LiveKit18KeyProviderOptions")
@interface KeyProviderOptions : NSObject
@property (nonatomic, readonly) BOOL sharedKey;
@property (nonatomic, readonly, copy) NSData * _Nonnull ratchetSalt;
@property (nonatomic, readonly) int32_t ratchetWindowSize;
@property (nonatomic, readonly, copy) NSData * _Nonnull uncryptedMagicBytes;
@property (nonatomic, readonly) int32_t failureTolerance;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit13LKAudioBuffer")
@interface LKAudioBuffer : NSObject
@property (nonatomic, readonly) NSInteger channels;
@property (nonatomic, readonly) NSInteger frames;
@property (nonatomic, readonly) NSInteger framesPerBand;
@property (nonatomic, readonly) NSInteger bands;
- (float * _Nonnull)rawBufferFor:(NSInteger)channel SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "rawBufferForChannel:");
- (float * _Nonnull)rawBufferForChannel:(NSInteger)channel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface LKAudioBuffer (SWIFT_EXTENSION(LiveKit))
/// Convert to AVAudioPCMBuffer Int16 format.
- (AVAudioPCMBuffer * _Nullable)toAVAudioPCMBuffer SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7LiveKit15LKSampleHandler") SWIFT_AVAILABILITY(maccatalyst,introduced=13.1)
@interface LKSampleHandler : RPBroadcastSampleHandler
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)broadcastStartedWithSetupInfo:(NSDictionary<NSString *, NSObject *> * _Nullable)_;
- (void)broadcastPaused;
- (void)broadcastResumed;
- (void)broadcastFinished;
- (void)processSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer withType:(RPSampleBufferType)type;
@end

@class NSCoder;
SWIFT_CLASS("_TtC7LiveKit12LiveKitError")
@interface LiveKitError : NSError
@property (nonatomic, readonly, copy) NSArray<NSError *> * _Nonnull underlyingErrors;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict SWIFT_UNAVAILABLE;
@end

/// The open source platform for real-time communication.
/// See <a href="https://docs.livekit.io/">LiveKit’s Online Docs</a> for more information.
/// Comments are written in <a href="https://developer.apple.com/documentation/docc">DocC</a> compatible format.
/// With Xcode 13 and above you can build documentation right into your Xcode documentation viewer by chosing
/// <em>Product</em> >  <em>Build Documentation</em> from Xcode’s menu.
/// Download the <a href="https://github.com/livekit/multiplatform-swiftui-example">Multiplatform SwiftUI Example</a>
/// to try out the features.
SWIFT_CLASS("_TtC7LiveKit10LiveKitSDK")
@interface LiveKitSDK : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sdkVersion;)
+ (NSString * _Nonnull)sdkVersion SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggerStandardOutput;
/// Notify the SDK to start initializing for faster connection/publishing later on. This is non-blocking.
+ (void)prepare;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum PublishState : NSInteger;
SWIFT_PROTOCOL("_TtP7LiveKit10LocalTrack_")
@protocol LocalTrack
@property (nonatomic, readonly, strong) id <TrackPublishOptions> _Nullable publishOptions;
@property (nonatomic, readonly) enum PublishState publishState;
- (void)muteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)unmuteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end

enum TrackKind : NSInteger;
enum TrackSource : NSInteger;
@class TrackStatistics;
@class VideoCodec;
enum TrackState : NSInteger;
SWIFT_CLASS("_TtC7LiveKit5Track")
@interface Track : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull cameraName;)
+ (NSString * _Nonnull)cameraName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull microphoneName;)
+ (NSString * _Nonnull)microphoneName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screenShareVideoName;)
+ (NSString * _Nonnull)screenShareVideoName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screenShareAudioName;)
+ (NSString * _Nonnull)screenShareAudioName SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) enum TrackKind kind;
@property (nonatomic, readonly) enum TrackSource source;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) TrackSid * _Nullable sid;
@property (nonatomic, readonly) BOOL isMuted;
@property (nonatomic, readonly, strong) TrackStatistics * _Nullable statistics;
@property (nonatomic, readonly, copy) NSDictionary<VideoCodec *, TrackStatistics *> * _Nonnull simulcastStatistics;
/// Dimensions of the video (only if video track)
@property (nonatomic, readonly, strong) Dimensions * _Nullable dimensions;
@property (nonatomic, readonly) enum TrackState trackState;
- (void)setWithReportStatistics:(BOOL)reportStatistics completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)startWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)stopWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TrackKind, "Kind", closed) {
  TrackKindAudio = 0,
  TrackKindVideo = 1,
  TrackKindNone = 2,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TrackState, "TrackState", closed) {
  TrackStateStopped = 0,
  TrackStateStarted = 1,
};

typedef SWIFT_ENUM_NAMED(NSInteger, TrackSource, "Source", closed) {
  TrackSourceUnknown = 0,
  TrackSourceCamera = 1,
  TrackSourceMicrophone = 2,
  TrackSourceScreenShareVideo = 3,
  TrackSourceScreenShareAudio = 4,
};

typedef SWIFT_ENUM_NAMED(NSInteger, PublishState, "PublishState", closed) {
  PublishStateUnpublished = 0,
  PublishStatePublished = 1,
};

SWIFT_CLASS("_TtC7LiveKit15LocalAudioTrack")
@interface LocalAudioTrack : Track <AudioTrack, LocalTrack>
- (void)muteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)unmuteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end

@interface LocalAudioTrack (SWIFT_EXTENSION(LiveKit))
- (void)addAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
- (void)removeAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
@end

@interface LocalAudioTrack (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, strong) id <TrackPublishOptions> _Nullable publishOptions;
@property (nonatomic, readonly) enum PublishState publishState;
@end

/// A class that captures audio from a local track and streams it as a data stream
/// in a selected format that can be sent to other participants via <code>ByteStreamWriter</code>.
SWIFT_CLASS("_TtC7LiveKit23LocalAudioTrackRecorder")
@interface LocalAudioTrackRecorder : NSObject <AudioRenderer>
/// The local audio track to capture audio from.
@property (nonatomic, readonly, strong) LocalAudioTrack * _Nonnull track;
/// The format of the audio data to stream.
@property (nonatomic, readonly) AVAudioCommonFormat format;
/// The sample rate of the audio data to stream.
@property (nonatomic, readonly) NSInteger sampleRate;
/// The number of channels of the audio data to stream.
@property (nonatomic, readonly) NSInteger channels;
/// The maximum size of the audio data to buffer.
@property (nonatomic, readonly) NSInteger maxSize;
/// Initialize the audio recorder with a local audio track.
/// note:
/// The default maximum size is 0, which means that the audio data will be buffered indefinitely.
/// \param track The local audio track to capture audio from.
///
/// \param format The format of the audio data to stream.
///
/// \param sampleRate The sample rate of the audio data to stream.
///
/// \param maxSize The maximum size of the audio data to buffer.
///
- (nonnull instancetype)initWithTrack:(LocalAudioTrack * _Nonnull)track format:(AVAudioCommonFormat)format sampleRate:(NSInteger)sampleRate maxSize:(NSInteger)maxSize OBJC_DESIGNATED_INITIALIZER;
/// Stops capturing audio from the local track.
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface LocalAudioTrackRecorder (SWIFT_EXTENSION(LiveKit))
/// Starts capturing audio from the local track and calls the provided closure with the audio data.
/// \param maxSize The maximum size of the audio data to buffer.
///
/// \param onData A closure that is called with the audio data.
///
/// \param onCompletion A closure that is called when the audio recording is completed.
///
- (void)startWithMaxSize:(NSInteger)_ onData:(void (^ _Nonnull)(NSData * _Nonnull))onData onCompletion:(void (^ _Nonnull)(NSError * _Nullable))onCompletion SWIFT_DEPRECATED_MSG("Use for/await instead.");
@end

@interface LocalAudioTrackRecorder (SWIFT_EXTENSION(LiveKit))
- (void)renderWithPcmBuffer:(AVAudioPCMBuffer * _Nonnull)pcmBuffer;
@end

SWIFT_CLASS("_TtC7LiveKit27LocalIceCandidateStatistics")
@interface LocalIceCandidateStatistics : IceCandidateStatistics
@end

@class ParticipantSid;
enum Kind : NSInteger;
SWIFT_CLASS("_TtC7LiveKit11Participant")
@interface Participant : NSObject
@property (nonatomic, readonly, strong) ParticipantSid * _Nullable sid;
@property (nonatomic, readonly, strong) ParticipantIdentity * _Nullable identity;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly) float audioLevel;
@property (nonatomic, readonly) BOOL isSpeaking;
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
@property (nonatomic, readonly) enum ParticipantState state;
@property (nonatomic, readonly) enum ConnectionQuality connectionQuality;
@property (nonatomic, readonly, strong) ParticipantPermissions * _Nonnull permissions;
@property (nonatomic, readonly, copy) NSDate * _Nullable joinedAt;
/// The kind of participant (i.e. a standard client participant, AI agent, etc.)
@property (nonatomic, readonly) enum Kind kind;
@property (nonatomic, readonly, copy) NSDictionary<TrackSid *, TrackPublication *> * _Nonnull trackPublications;
@property (nonatomic, readonly, copy) NSArray<TrackPublication *> * _Nonnull audioTracks;
@property (nonatomic, readonly, copy) NSArray<TrackPublication *> * _Nonnull videoTracks;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LocalVideoTrack;
@class VideoPublishOptions;
@class ParticipantTrackPermission;
SWIFT_CLASS("_TtC7LiveKit16LocalParticipant")
@interface LocalParticipant : Participant
@property (nonatomic, readonly, copy) NSArray<LocalTrackPublication *> * _Nonnull localAudioTracks;
@property (nonatomic, readonly, copy) NSArray<LocalTrackPublication *> * _Nonnull localVideoTracks;
/// publish a new audio track to the Room
- (void)publishWithAudioTrack:(LocalAudioTrack * _Nonnull)audioTrack options:(AudioPublishOptions * _Nullable)options completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
/// publish a new video track to the Room
- (void)publishWithVideoTrack:(LocalVideoTrack * _Nonnull)videoTrack options:(VideoPublishOptions * _Nullable)options completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
- (void)unpublishAllWithNotify:(BOOL)_notify completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// unpublish an existing published track
/// this will also stop the track
- (void)unpublishWithPublication:(LocalTrackPublication * _Nonnull)publication notify:(BOOL)_notify completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Publish data to the other participants in the room
/// Data is forwarded to each participant in the room. Each payload must not exceed 15k.
/// \param data Data to send
///
/// \param options Provide options with a <code>DataPublishOptions</code> class.
///
- (void)publishWithData:(NSData * _Nonnull)data options:(DataPublishOptions * _Nullable)options completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Control who can subscribe to LocalParticipant’s published tracks.
/// By default, all participants can subscribe. This allows fine-grained control over
/// who is able to subscribe at a participant and track level.
/// Note: if access is given at a track-level (i.e. both <code>allParticipantsAllowed</code> and
/// <code>ParticipantTrackPermission/allTracksAllowed</code> are false), any newer published tracks
/// will not grant permissions to any participants and will require a subsequent
/// permissions update to allow subscription.
/// \param allParticipantsAllowed Allows all participants to subscribe all tracks. 
/// Takes precedence over <code>participantTrackPermissions</code> if set to true.
/// By default this is set to true.
///
/// \param participantTrackPermissions Full list of individual permissions per 
/// participant/track. Any omitted participants will not receive any permissions.
///
- (void)setTrackSubscriptionPermissionsWithAllParticipantsAllowed:(BOOL)allParticipantsAllowed trackPermissions:(NSArray<ParticipantTrackPermission *> * _Nonnull)trackPermissions completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end

@class StreamTextOptions;
@class TextStreamInfo;
@class StreamByteOptions;
@class TextStreamWriter;
@interface LocalParticipant (SWIFT_EXTENSION(LiveKit))
- (void)sendTextWithText:(NSString * _Nonnull)text options:(StreamTextOptions * _Nonnull)options onCompletion:(void (^ _Nonnull)(TextStreamInfo * _Nonnull))onCompletion onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_UNAVAILABLE_MSG("Use async sendText(_:options:) method instead.");
- (void)sendFileWithFileURL:(NSURL * _Nonnull)fileURL options:(StreamByteOptions * _Nonnull)options onCompletion:(void (^ _Nonnull)(ByteStreamInfo * _Nonnull))onCompletion onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_UNAVAILABLE_MSG("Use async sendFile(_:options:) method instead.");
- (void)streamTextWithOptions:(StreamTextOptions * _Nonnull)options streamHandler:(void (^ _Nonnull)(TextStreamWriter * _Nonnull))streamHandler onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_UNAVAILABLE_MSG("Use async streamText(options:) method instead.");
- (void)streamBytesWithOptions:(StreamByteOptions * _Nonnull)options streamHandler:(void (^ _Nonnull)(ByteStreamWriter * _Nonnull))streamHandler onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_UNAVAILABLE_MSG("Use async streamBytes(options:) method instead.");
@end

@interface LocalParticipant (SWIFT_EXTENSION(LiveKit))
- (void)setCameraWithEnabled:(BOOL)enabled captureOptions:(CameraCaptureOptions * _Nullable)captureOptions publishOptions:(VideoPublishOptions * _Nullable)publishOptions completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
- (void)setMicrophoneWithEnabled:(BOOL)enabled captureOptions:(AudioCaptureOptions * _Nullable)captureOptions publishOptions:(AudioPublishOptions * _Nullable)publishOptions completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
/// Enable or disable screen sharing. This has different behavior depending on the platform.
/// For iOS, this will use <code>InAppScreenCapturer</code> to capture in-app screen only due to Apple’s limitation.
/// If you would like to capture the screen when the app is in the background, you will need to create a “Broadcast Upload Extension”.
/// For macOS, this will use <code>MacOSScreenCapturer</code> to capture the main screen. <code>MacOSScreenCapturer</code> has the ability
/// to capture other screens and windows. See <code>MacOSScreenCapturer</code> for details.
/// For advanced usage, you can create a relevant <code>LocalVideoTrack</code> and call <code>LocalParticipant/publishVideoTrack(track:publishOptions:)</code>.
- (void)setScreenShareWithEnabled:(BOOL)enabled completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
- (void)setWithSource:(enum TrackSource)source enabled:(BOOL)enabled captureOptions:(id <CaptureOptions> _Nullable)captureOptions publishOptions:(id <TrackPublishOptions> _Nullable)publishOptions completionHandler:(void (^ _Nonnull)(LocalTrackPublication * _Nullable, NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC7LiveKit16TrackPublication")
@interface TrackPublication : NSObject
@property (nonatomic, readonly, strong) TrackSid * _Nonnull sid;
@property (nonatomic, readonly) enum TrackKind kind;
@property (nonatomic, readonly) enum TrackSource source;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) Track * _Nullable track;
@property (nonatomic, readonly) BOOL isMuted;
@property (nonatomic, readonly) enum StreamState streamState;
/// video-only
@property (nonatomic, readonly, strong) Dimensions * _Nullable dimensions;
@property (nonatomic, readonly) BOOL isSimulcasted;
/// MIME type of the <code>Track</code>.
@property (nonatomic, readonly, copy) NSString * _Nonnull mimeType;
@property (nonatomic, readonly) BOOL isSubscribed;
@property (nonatomic, readonly) enum EncryptionType encryptionType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit21LocalTrackPublication")
@interface LocalTrackPublication : TrackPublication
@property (nonatomic, readonly) enum StreamState streamState;
@end

SWIFT_PROTOCOL("_TtP7LiveKit21VideoCapturerDelegate_")
@protocol VideoCapturerDelegate
@optional
- (void)capturer:(VideoCapturer * _Nonnull)capturer didUpdateDimensions:(Dimensions * _Nullable)dimensions;
- (void)capturer:(VideoCapturer * _Nonnull)capturer didUpdateState:(enum CapturerState)state;
@end

@interface LocalTrackPublication (SWIFT_EXTENSION(LiveKit)) <VideoCapturerDelegate>
- (void)capturer:(VideoCapturer * _Nonnull)_ didUpdateDimensions:(Dimensions * _Nullable)_;
- (void)capturer:(VideoCapturer * _Nonnull)capturer didUpdateState:(enum CapturerState)state;
@end

SWIFT_CLASS("_TtC7LiveKit15LocalVideoTrack")
@interface LocalVideoTrack : Track <LocalTrack>
@property (nonatomic, readonly, strong) VideoCapturer * _Nonnull capturer;
- (void)muteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)unmuteWithCompletionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end

@interface LocalVideoTrack (SWIFT_EXTENSION(LiveKit))
+ (LocalVideoTrack * _Nonnull)createCameraTrack SWIFT_WARN_UNUSED_RESULT;
+ (LocalVideoTrack * _Nonnull)createCameraTrackWithName:(NSString * _Nullable)name options:(CameraCaptureOptions * _Nullable)options reportStatistics:(BOOL)reportStatistics processor:(id <VideoProcessor> _Nullable)processor SWIFT_WARN_UNUSED_RESULT;
@end

@protocol VideoRenderer;
SWIFT_PROTOCOL("_TtP7LiveKit10VideoTrack_")
@protocol VideoTrack
- (void)addVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
- (void)removeVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
@end

@interface LocalVideoTrack (SWIFT_EXTENSION(LiveKit)) <VideoTrack>
- (void)addVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
- (void)removeVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
@end

@interface LocalVideoTrack (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, strong) id <TrackPublishOptions> _Nullable publishOptions;
@property (nonatomic, readonly) enum PublishState publishState;
@end

/// A simple abstraction of a View that is native to the platform.
/// When built for iOS this will be a UIView.
/// When built for macOS this will be a NSView.
SWIFT_CLASS("_TtC7LiveKit10NativeView")
@interface NativeView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end

SWIFT_CLASS("_TtC7LiveKit23SentRtpStreamStatistics")
@interface SentRtpStreamStatistics : RtpStreamStatistics
@end

SWIFT_CLASS("_TtC7LiveKit27OutboundRtpStreamStatistics")
@interface OutboundRtpStreamStatistics : SentRtpStreamStatistics
@end

@interface Participant (SWIFT_EXTENSION(LiveKit))
@end

typedef SWIFT_ENUM(NSInteger, Kind, closed) {
  KindUnknown = 0,
/// Standard participants, e.g. web clients.
  KindStandard = 1,
/// Only ingests streams.
  KindIngress = 2,
/// Only consumes streams.
  KindEgress = 3,
/// SIP participants.
  KindSip = 4,
/// LiveKit agents.
  KindAgent = 5,
};

@interface Participant (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@interface Participant (SWIFT_EXTENSION(LiveKit))
@end

SWIFT_CLASS_NAMED("Sid")
@interface ParticipantSid : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS_NAMED("Identity")
@interface ParticipantIdentity : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface Participant (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@interface Participant (SWIFT_EXTENSION(LiveKit))
/// The avatar worker participant associated with the agent.
@property (nonatomic, readonly, strong) Participant * _Nullable avatarWorker;
@end

@protocol ParticipantDelegate;
@interface Participant (SWIFT_EXTENSION(LiveKit))
- (void)addDelegate:(id <ParticipantDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <ParticipantDelegate> _Nonnull)delegate;
- (void)removeAllDelegates;
@end

@interface Participant (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly) BOOL isAgent;
@property (nonatomic, readonly, copy) NSString * _Nonnull agentStateString;
@end

/// Delegate methods for a participant.
/// Since <code>Participant</code> inherits from <code>MulticastDelegate</code>,
/// you can call <code>add(delegate:)</code> on <code>Participant</code> to add as many delegates as you need.
/// All delegate methods are optional.
/// To ensure each participant’s delegate is registered, you can look through <code>Room/localParticipant</code> and <code>Room/remoteParticipants</code> on connect
/// and register it on new participants inside <code>RoomDelegate/room(_:participantDidJoin:)</code>
SWIFT_PROTOCOL("_TtP7LiveKit19ParticipantDelegate_")
@protocol ParticipantDelegate
@optional
/// A <code>Participant</code>’s metadata has updated.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateMetadata:(NSString * _Nullable)metadata;
/// A <code>Participant</code>’s name has updated.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateName:(NSString * _Nonnull)name;
/// The isSpeaking status of a <code>Participant</code> has changed.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateIsSpeaking:(BOOL)isSpeaking;
/// The state of a <code>Participant</code> has updated.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateState:(enum ParticipantState)state;
/// The connection quality of a <code>Participant</code> has updated.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateConnectionQuality:(enum ConnectionQuality)connectionQuality;
- (void)participant:(Participant * _Nonnull)participant didUpdatePermissions:(ParticipantPermissions * _Nonnull)permissions;
- (void)participant:(Participant * _Nonnull)participant didUpdateAttributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes;
/// <code>muted</code> state has updated for the <code>Participant</code>’s <code>TrackPublication</code>.
/// For the <code>LocalParticipant</code>, the delegate method will be called if setMute was called on <code>LocalTrackPublication</code>,
/// or if the server has requested the participant to be muted.
/// <code>participant</code> Can be a <code>LocalParticipant</code> or a <code>RemoteParticipant</code>.
- (void)participant:(Participant * _Nonnull)participant trackPublication:(TrackPublication * _Nonnull)trackPublication didUpdateIsMuted:(BOOL)isMuted;
/// Received transcription segments.
- (void)participant:(Participant * _Nonnull)participant trackPublication:(TrackPublication * _Nonnull)trackPublication didReceiveTranscriptionSegments:(NSArray<TranscriptionSegment *> * _Nonnull)segments;
/// The <code>LocalParticipant</code> has published a <code>LocalTrackPublication</code>.
- (void)localParticipant:(LocalParticipant * _Nonnull)participant didPublishTrack:(LocalTrackPublication * _Nonnull)publication;
/// The <code>LocalParticipant</code> has unpublished a <code>LocalTrackPublication</code>.
- (void)localParticipant:(LocalParticipant * _Nonnull)participant didUnpublishTrack:(LocalTrackPublication * _Nonnull)publication;
/// Fired when the first remote participant has subscribed to the localParticipant’s track.
- (void)localParticipant:(LocalParticipant * _Nonnull)participant remoteDidSubscribeTrack:(LocalTrackPublication * _Nonnull)publication;
/// When a new <code>RemoteTrackPublication</code> is published to <code>Room</code> after the <code>LocalParticipant</code> has joined.
/// This delegate method will not be called for tracks that are already published.
- (void)remoteParticipant:(RemoteParticipant * _Nonnull)participant didPublishTrack:(RemoteTrackPublication * _Nonnull)publication;
/// The <code>RemoteParticipant</code> has unpublished a <code>RemoteTrackPublication</code>.
- (void)remoteParticipant:(RemoteParticipant * _Nonnull)participant didUnpublishTrack:(RemoteTrackPublication * _Nonnull)publication;
/// The <code>LocalParticipant</code> has subscribed to a new <code>RemoteTrackPublication</code>.
/// This event will always fire as long as new tracks are ready for use.
- (void)participant:(RemoteParticipant * _Nonnull)participant didSubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
/// Unsubscribed from a <code>RemoteTrackPublication</code> and  is no longer available.
/// Clients should listen to this event and handle cleanup.
- (void)participant:(RemoteParticipant * _Nonnull)participant didUnsubscribeTrack:(RemoteTrackPublication * _Nonnull)publication;
/// Could not subscribe to a track.
/// This is an error state, the subscription can be retried.
- (void)participant:(RemoteParticipant * _Nonnull)participant didFailToSubscribeTrackWithSid:(TrackSid * _Nonnull)trackSid error:(LiveKitError * _Nonnull)error;
/// <code>TrackPublication/streamState</code> has updated for the <code>RemoteTrackPublication</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant trackPublication:(RemoteTrackPublication * _Nonnull)trackPublication didUpdateStreamState:(enum StreamState)streamState;
/// <code>RemoteTrackPublication/isSubscriptionAllowed</code> has updated for the <code>RemoteTrackPublication</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant trackPublication:(RemoteTrackPublication * _Nonnull)trackPublication didUpdateIsSubscriptionAllowed:(BOOL)isSubscriptionAllowed;
/// Data was received from a <code>RemoteParticipant</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didReceiveData:(NSData * _Nonnull)data forTopic:(NSString * _Nonnull)topic;
/// Renamed to <code>ParticipantDelegate/participant(_:didUpdateMetadata:)</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateMetadata_:(NSString * _Nullable)metadata SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didUpdateMetadata:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didUpdateIsSpeaking:)</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateSpeaking:(BOOL)speaking SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didUpdateIsSpeaking:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didUpdateConnectionQuality:)</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdateConnectionQuality_:(enum ConnectionQuality)connectionQuality SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didUpdateConnectionQuality:'");
/// Renamed to <code>ParticipantDelegate/participant(_:trackPublication:didUpdateIsMuted:)</code>.
- (void)participant:(Participant * _Nonnull)participant publication:(TrackPublication * _Nonnull)publication didUpdateMuted:(BOOL)muted SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:trackPublication:didUpdateIsMuted:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didUpdatePermissions:)</code>.
- (void)participant:(Participant * _Nonnull)participant didUpdatePermissions_:(ParticipantPermissions * _Nonnull)permissions SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didUpdatePermissions:'");
/// Renamed to <code>ParticipantDelegate/participant(_:trackPublication:didUpdateStreamState:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant publication:(RemoteTrackPublication * _Nonnull)publication didUpdateStreamState:(enum StreamState)streamState SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:trackPublication:didUpdateStreamState:'");
/// Renamed to <code>ParticipantDelegate/participant(_:trackPublication:didUpdateIsSubscriptionAllowed:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant publication:(RemoteTrackPublication * _Nonnull)publication didUpdateCanSubscribe:(BOOL)allowed SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:trackPublication:didUpdateIsSubscriptionAllowed:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didPublishTrack:)-8e9iw</code>.
- (void)remoteParticipant:(RemoteParticipant * _Nonnull)participant didPublish:(RemoteTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'remoteParticipant:didPublishTrack:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didUnpublishTrack:)-1roup</code>.
- (void)remoteParticipant:(RemoteParticipant * _Nonnull)participant didUnpublish:(RemoteTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'remoteParticipant:didUnpublishTrack:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didPublishTrack:)-7emm</code>.
- (void)localParticipant:(LocalParticipant * _Nonnull)participant didPublish:(LocalTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'localParticipant' has been renamed to 'localParticipant:didPublishTrack:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didUnpublishTrack:)-4pv3r</code>.
- (void)localParticipant:(LocalParticipant * _Nonnull)participant didUnpublish:(LocalTrackPublication * _Nonnull)publication SWIFT_UNAVAILABLE_MSG("'localParticipant' has been renamed to 'localParticipant:didUnpublishTrack:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didSubscribeTrack:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didSubscribe:(RemoteTrackPublication * _Nonnull)publication track:(Track * _Nonnull)track SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didSubscribeTrack:'");
@required
/// Renamed to <code>ParticipantDelegate/participant(_:didFailToSubscribeTrackWithSid:error:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didFailToSubscribe:(NSString * _Nonnull)trackSid error:(NSError * _Nonnull)error SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didFailToSubscribeTrackWithSid:error:'");
@optional
/// Renamed to <code>ParticipantDelegate/participant(_:didUnsubscribeTrack:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didUnsubscribePublication:(RemoteTrackPublication * _Nonnull)publication track:(Track * _Nonnull)track SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didUnsubscribeTrack:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didReceiveData:forTopic:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didReceiveData:(NSData * _Nonnull)data SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didReceiveData:forTopic:'");
/// Renamed to <code>ParticipantDelegate/participant(_:didReceiveData:forTopic:)</code>.
- (void)participant:(RemoteParticipant * _Nonnull)participant didReceiveData:(NSData * _Nonnull)data topic:(NSString * _Nonnull)topic SWIFT_UNAVAILABLE_MSG("'participant' has been renamed to 'participant:didReceiveData:forTopic:'");
@end

SWIFT_CLASS("_TtC7LiveKit22ParticipantPermissions")
@interface ParticipantPermissions : NSObject
/// <code>Participant</code> can subscribe to tracks in the room
@property (nonatomic, readonly) BOOL canSubscribe;
/// <code>Participant</code> can publish new tracks to room
@property (nonatomic, readonly) BOOL canPublish;
/// <code>Participant</code> can publish data
@property (nonatomic, readonly) BOOL canPublishData;
/// <code>Participant</code> can publish allowed sources
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull canPublishSources;
/// <code>Participant</code> is hidden to others
@property (nonatomic, readonly) BOOL hidden;
/// Indicates it’s a recorder instance
@property (nonatomic, readonly) BOOL recorder;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Describes the state of a <code>Participant</code>’s connection to the LiveKit server.
typedef SWIFT_ENUM(NSInteger, ParticipantState, closed) {
/// Websocket is connected, but no offer has been sent yet
  ParticipantStateJoining = 0,
/// Server has received the client’s offer
  ParticipantStateJoined = 1,
/// ICE connectivity has been established
  ParticipantStateActive = 2,
/// Websocket has disconnected
  ParticipantStateDisconnected = 3,
/// Unknown state
  ParticipantStateUnknown = 999,
};

SWIFT_CLASS("_TtC7LiveKit26ParticipantTrackPermission")
@interface ParticipantTrackPermission : NSObject
/// The participant id this permission applies to.
@property (nonatomic, readonly, copy) NSString * _Nonnull participantSid;
- (nonnull instancetype)initWithParticipantSid:(NSString * _Nonnull)participantSid allTracksAllowed:(BOOL)allTracksAllowed allowedTrackSids:(NSArray<NSString *> * _Nonnull)allowedTrackSids OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit24PeerConnectionStatistics")
@interface PeerConnectionStatistics : Statistics
@end

/// A buffer that captures audio before connecting to the server.
SWIFT_CLASS("_TtC7LiveKit21PreConnectAudioBuffer")
@interface PreConnectAudioBuffer : NSObject
/// The default data topic used to send the audio buffer.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull dataTopic;)
+ (NSString * _Nonnull)dataTopic SWIFT_WARN_UNUSED_RESULT;
/// The room instance to send the audio buffer to.
@property (nonatomic, readonly, strong) Room * _Nullable room;
/// The audio recorder instance.
@property (nonatomic, readonly, strong) LocalAudioTrackRecorder * _Nullable recorder;
/// Initialize the audio buffer with a room instance.
/// \param room The room instance to send the audio buffer to.
///
/// \param onError The error handler to call when an error occurs while sending the audio buffer.
///
- (nonnull instancetype)initWithRoom:(Room * _Nullable)room onError:(void (^ _Nullable)(NSError * _Nonnull))onError OBJC_DESIGNATED_INITIALIZER;
- (void)setErrorHandler:(void (^ _Nullable)(NSError * _Nonnull))onError;
/// Start capturing audio.
/// \param timeout The timeout for the remote participant to subscribe to the audio track.
/// The room connection needs to be established and the remote participant needs to subscribe to the audio track
/// before the timeout is reached. Otherwise, the audio stream will be flushed without sending.
///
/// \param recorder Optional custom recorder instance. If not provided, a new one will be created.
///
- (void)startRecordingWithTimeout:(NSTimeInterval)timeout recorder:(LocalAudioTrackRecorder * _Nullable)recorder completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Stop capturing audio.
/// \param flush If <code>true</code>, the audio stream will be flushed immediately without sending.
///
- (void)stopRecordingWithFlush:(BOOL)flush;
/// Send the audio data to the room.
/// \param room The room instance to send the audio data.
///
/// \param agents The agents to send the audio data to.
///
/// \param topic The topic to send the audio data.
///
- (void)sendAudioDataTo:(Room * _Nonnull)room agents:(NSArray<ParticipantIdentity *> * _Nonnull)agents on:(NSString * _Nonnull)topic completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface PreConnectAudioBuffer (SWIFT_EXTENSION(LiveKit)) <RoomDelegate>
- (void)room:(Room * _Nonnull)_ localParticipant:(LocalParticipant * _Nonnull)_ remoteDidSubscribeTrack:(LocalTrackPublication * _Nonnull)_;
- (void)room:(Room * _Nonnull)room participant:(Participant * _Nonnull)participant didUpdateState:(enum ParticipantState)state;
@end

typedef SWIFT_ENUM(NSInteger, ProtocolVersion, closed) {
  ProtocolVersionV8 = 8,
  ProtocolVersionV9 = 9,
  ProtocolVersionV10 = 10,
/// Sync stream id
  ProtocolVersionV11 = 11,
/// Supports <code>ConnectionQuality/lost</code>
  ProtocolVersionV12 = 12,
};

typedef SWIFT_ENUM(NSInteger, ReconnectMode, closed) {
/// Quick reconnection mode attempts to maintain the same session, reusing existing
/// transport connections and published tracks. This is faster but may not succeed
/// in all network conditions.
  ReconnectModeQuick = 0,
/// Full reconnection mode performs a complete new connection to the LiveKit server,
/// closing existing connections and re-publishing all tracks. This is slower but
/// more reliable for recovering from severe connection issues.
  ReconnectModeFull = 1,
};

SWIFT_PROTOCOL("_TtP7LiveKit11RemoteTrack_")
@protocol RemoteTrack
@end

SWIFT_CLASS("_TtC7LiveKit16RemoteAudioTrack")
@interface RemoteAudioTrack : Track <AudioTrack, RemoteTrack>
- (void)addAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
- (void)removeAudioRenderer:(id <AudioRenderer> _Nonnull)audioRenderer;
@end

SWIFT_CLASS("_TtC7LiveKit28RemoteIceCandidateStatistics")
@interface RemoteIceCandidateStatistics : IceCandidateStatistics
@end

SWIFT_CLASS("_TtC7LiveKit32RemoteInboundRtpStreamStatistics")
@interface RemoteInboundRtpStreamStatistics : ReceivedRtpStreamStatistics
@end

SWIFT_CLASS("_TtC7LiveKit33RemoteOutboundRtpStreamStatistics")
@interface RemoteOutboundRtpStreamStatistics : SentRtpStreamStatistics
@end

SWIFT_CLASS("_TtC7LiveKit17RemoteParticipant")
@interface RemoteParticipant : Participant
@end

enum SubscriptionState : NSInteger;
enum VideoQuality : NSInteger;
SWIFT_CLASS("_TtC7LiveKit22RemoteTrackPublication")
@interface RemoteTrackPublication : TrackPublication
@property (nonatomic, readonly) BOOL isSubscriptionAllowed;
@property (nonatomic, readonly) BOOL isEnabled;
@property (nonatomic, readonly) BOOL isMuted;
@property (nonatomic, readonly) BOOL isSubscribed;
@property (nonatomic, readonly) enum SubscriptionState subscriptionState;
/// Subscribe or unsubscribe from this track.
- (void)setWithSubscribed:(BOOL)newValue completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Enable or disable server from sending down data for this track.
/// This is useful when the participant is off screen, you may disable streaming down their video to reduce bandwidth requirements.
- (void)setWithEnabled:(BOOL)newValue completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Set preferred video FPS for this track.
- (void)setWithPreferredFPS:(NSUInteger)newValue completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// Set preferred video dimensions for this track.
/// Based on this value, server will decide which layer to send.
/// Use <code>RemoteTrackPublication/set(videoQuality:)</code> to explicitly set layer instead.
- (void)setWithPreferredDimensions:(Dimensions * _Nonnull)newValue completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
/// For tracks that support simulcasting, adjust subscribed quality.
/// This indicates the highest quality the client can accept. if network
/// bandwidth does not allow, server will automatically reduce quality to
/// optimize for uninterrupted video.
- (void)setWithVideoQuality:(enum VideoQuality)newValue completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
@end

SWIFT_CLASS("_TtC7LiveKit16RemoteVideoTrack")
@interface RemoteVideoTrack : Track <RemoteTrack>
@end

@interface RemoteVideoTrack (SWIFT_EXTENSION(LiveKit)) <VideoTrack>
- (void)addVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
- (void)removeVideoRenderer:(id <VideoRenderer> _Nonnull)videoRenderer;
@end

@class RoomSid;
@class RoomOptions;
SWIFT_CLASS("_TtC7LiveKit4Room")
@interface Room : NSObject
/// Server assigned id of the Room.
@property (nonatomic, readonly, strong) RoomSid * _Nullable sid;
/// Server assigned id of the Room. <em>async</em> version of <code>Room/sid</code>.
- (void)sidWithCompletionHandler:(void (^ _Nonnull)(RoomSid * _Nullable, NSError * _Nullable))completionHandler;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// Room’s metadata.
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
@property (nonatomic, readonly, copy) NSString * _Nullable serverVersion;
/// Region code the client is currently connected to.
@property (nonatomic, readonly, copy) NSString * _Nullable serverRegion;
/// Region code the client is currently connected to.
@property (nonatomic, readonly, copy) NSString * _Nullable serverNodeId;
@property (nonatomic, readonly, copy) NSDictionary<ParticipantIdentity *, RemoteParticipant *> * _Nonnull remoteParticipants;
@property (nonatomic, readonly, copy) NSArray<Participant *> * _Nonnull activeSpeakers;
@property (nonatomic, readonly, copy) NSDate * _Nullable creationTime;
/// If the current room has a participant with <code>recorder:true</code> in its JWT grant.
@property (nonatomic, readonly) BOOL isRecording;
@property (nonatomic, readonly) NSInteger maxParticipants;
@property (nonatomic, readonly) NSInteger participantCount;
@property (nonatomic, readonly) NSInteger publishersCount;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable token;
/// Current <code>ConnectionState</code> of the <code>Room</code>.
@property (nonatomic, readonly) enum ConnectionState connectionState;
@property (nonatomic, readonly, strong) LiveKitError * _Nullable disconnectError;
@property (nonatomic, strong) LocalParticipant * _Nonnull localParticipant;
- (nonnull instancetype)init;
- (nonnull instancetype)initWithDelegate:(id <RoomDelegate> _Nullable)delegate connectOptions:(ConnectOptions * _Nullable)connectOptions roomOptions:(RoomOptions * _Nullable)roomOptions OBJC_DESIGNATED_INITIALIZER;
- (void)connectWithUrl:(NSString * _Nonnull)url token:(NSString * _Nonnull)token connectOptions:(ConnectOptions * _Nullable)connectOptions roomOptions:(RoomOptions * _Nullable)roomOptions completionHandler:(void (^ _Nonnull)(NSError * _Nullable))completionHandler;
- (void)disconnectWithCompletionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
@end

SWIFT_CLASS_NAMED("Sid")
@interface RoomSid : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TextStreamReader;
@interface Room (SWIFT_EXTENSION(LiveKit))
- (void)registerByteStreamHandlerFor:(NSString * _Nonnull)topic onNewStream:(void (^ _Nonnull)(ByteStreamReader * _Nonnull, ParticipantIdentity * _Nonnull))onNewStream onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_DEPRECATED_MSG("Use async registerByteStreamHandler(for:onNewStream:) method instead.");
- (void)registerTextStreamHandlerFor:(NSString * _Nonnull)topic onNewStream:(void (^ _Nonnull)(TextStreamReader * _Nonnull, ParticipantIdentity * _Nonnull))onNewStream onError:(void (^ _Nullable)(NSError * _Nonnull))onError SWIFT_DEPRECATED_MSG("Use async registerTextStreamHandler(for:onNewStream:) method instead.");
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
/// Set this to true to bypass initialization of voice processing.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL bypassVoiceProcessing SWIFT_DEPRECATED_MSG("", "AudioManager.shared.isVoiceProcessingBypassed");)
+ (BOOL)bypassVoiceProcessing SWIFT_WARN_UNUSED_RESULT;
+ (void)setBypassVoiceProcessing:(BOOL)newValue;
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
/// A dictionary containing all agent participants.
/// note:
/// This will not include participants that are publishing on behalf of another participant
/// e.g. avatar workers. To access them directly use <code>Participant/avatarWorker</code> property of <code>agentParticipant</code>.
@property (nonatomic, readonly, copy) NSDictionary<ParticipantIdentity *, Participant *> * _Nonnull agentParticipants;
/// The first agent participant.
@property (nonatomic, readonly, strong) Participant * _Nullable agentParticipant;
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
/// Unregisters a byte stream handler that was previously registered for the given topic.
- (void)unregisterByteStreamHandlerFor:(NSString * _Nonnull)topic completionHandler:(void (^ _Nonnull)(void))completionHandler;
/// Unregisters a text stream handler that was previously registered for the given topic.
- (void)unregisterTextStreamHandlerFor:(NSString * _Nonnull)topic completionHandler:(void (^ _Nonnull)(void))completionHandler;
@end

@interface Room (SWIFT_EXTENSION(LiveKit))
- (void)addDelegate:(id <RoomDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <RoomDelegate> _Nonnull)delegate;
- (void)removeAllDelegates;
@end

@class ScreenShareCaptureOptions;
SWIFT_CLASS("_TtC7LiveKit11RoomOptions")
@interface RoomOptions : NSObject
@property (nonatomic, readonly, strong) CameraCaptureOptions * _Nonnull defaultCameraCaptureOptions;
@property (nonatomic, readonly, strong) ScreenShareCaptureOptions * _Nonnull defaultScreenShareCaptureOptions;
@property (nonatomic, readonly, strong) AudioCaptureOptions * _Nonnull defaultAudioCaptureOptions;
@property (nonatomic, readonly, strong) VideoPublishOptions * _Nonnull defaultVideoPublishOptions;
@property (nonatomic, readonly, strong) AudioPublishOptions * _Nonnull defaultAudioPublishOptions;
@property (nonatomic, readonly, strong) DataPublishOptions * _Nonnull defaultDataPublishOptions;
/// AdaptiveStream lets LiveKit automatically manage quality of subscribed
/// video tracks to optimize for bandwidth and CPU.
/// When attached video elements are visible, it’ll choose an appropriate
/// resolution based on the size of largest video element it’s attached to.
/// When none of the video elements are visible, it’ll temporarily pause
/// the data flow until they are visible again.
@property (nonatomic, readonly) BOOL adaptiveStream;
/// Dynamically pauses video layers that are not being consumed by any subscribers,
/// significantly reducing publishing CPU and bandwidth usage.
@property (nonatomic, readonly) BOOL dynacast;
@property (nonatomic, readonly) BOOL stopLocalTrackOnUnpublish;
/// Automatically suspend(mute) local camera video tracks when the app enters background and
/// resume(unmute) when the app enters foreground again.
@property (nonatomic, readonly) BOOL suspendLocalVideoTracksInBackground;
@property (nonatomic, readonly) BOOL reportRemoteTrackStatistics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDefaultCameraCaptureOptions:(CameraCaptureOptions * _Nonnull)defaultCameraCaptureOptions defaultScreenShareCaptureOptions:(ScreenShareCaptureOptions * _Nonnull)defaultScreenShareCaptureOptions defaultAudioCaptureOptions:(AudioCaptureOptions * _Nonnull)defaultAudioCaptureOptions defaultVideoPublishOptions:(VideoPublishOptions * _Nonnull)defaultVideoPublishOptions defaultAudioPublishOptions:(AudioPublishOptions * _Nonnull)defaultAudioPublishOptions defaultDataPublishOptions:(DataPublishOptions * _Nonnull)defaultDataPublishOptions adaptiveStream:(BOOL)adaptiveStream dynacast:(BOOL)dynacast stopLocalTrackOnUnpublish:(BOOL)stopLocalTrackOnUnpublish suspendLocalVideoTracksInBackground:(BOOL)suspendLocalVideoTracksInBackground e2eeOptions:(E2EEOptions * _Nullable)e2eeOptions reportRemoteTrackStatistics:(BOOL)reportRemoteTrackStatistics OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

typedef SWIFT_ENUM(NSInteger, ScalabilityMode, closed) {
  ScalabilityModeL3T3 = 1,
  ScalabilityModeL3T3_KEY = 2,
  ScalabilityModeL3T3_KEY_SHIFT = 3,
};

SWIFT_CLASS("_TtC7LiveKit25ScreenShareCaptureOptions")
@interface ScreenShareCaptureOptions : NSObject <VideoCaptureOptions>
@property (nonatomic, readonly, strong) Dimensions * _Nonnull dimensions;
@property (nonatomic, readonly) NSInteger fps;
/// Only used for macOS
@property (nonatomic, readonly) BOOL showCursor;
@property (nonatomic, readonly) BOOL appAudio;
/// Use broadcast extension for screen capture (iOS only).
/// If a broadcast extension has been properly configured, this defaults to <code>true</code>.
@property (nonatomic, readonly) BOOL useBroadcastExtension;
@property (nonatomic, readonly) BOOL includeCurrentApplication;
/// Exclude windows by their window ID (macOS only).
@property (nonatomic, readonly, copy) NSArray<NSNumber *> * _Nonnull excludeWindowIDs;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Options used when opening an outgoing byte data stream.
SWIFT_CLASS("_TtC7LiveKit17StreamByteOptions")
@interface StreamByteOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull topic;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
@property (nonatomic, readonly, copy) NSArray<ParticipantIdentity *> * _Nonnull destinationIdentities;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
/// Explicitly set MIME type of the stream data. Auto-detected for files, otherwise
/// defaults to <code>application/octet-stream</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable mimeType;
/// The name of the file being sent.
@property (nonatomic, readonly, copy) NSString * _Nullable name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, StreamState, closed) {
  StreamStatePaused = 0,
  StreamStateActive = 1,
};

/// Options used when opening an outgoing text data stream.
SWIFT_CLASS("_TtC7LiveKit17StreamTextOptions")
@interface StreamTextOptions : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull topic;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
@property (nonatomic, readonly, copy) NSArray<ParticipantIdentity *> * _Nonnull destinationIdentities;
@property (nonatomic, readonly, copy) NSString * _Nullable id;
@property (nonatomic, readonly) NSInteger version;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull attachedStreamIDs;
@property (nonatomic, readonly, copy) NSString * _Nullable replyToStreamID;
- (nonnull instancetype)initWithTopic:(NSString * _Nonnull)topic attributes:(NSDictionary<NSString *, NSString *> * _Nonnull)attributes destinationIdentities:(NSArray<ParticipantIdentity *> * _Nonnull)destinationIdentities id:(NSString * _Nullable)id version:(NSInteger)version attachedStreamIDs:(NSArray<NSString *> * _Nonnull)attachedStreamIDs replyToStreamID:(NSString * _Nullable)replyToStreamID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SubscriptionState, closed) {
  SubscriptionStateSubscribed = 0,
  SubscriptionStateNotAllowed = 1,
  SubscriptionStateUnsubscribed = 2,
};

enum TextStreamInfoOperationType : NSInteger;
/// Information about a text data stream.
SWIFT_CLASS("_TtC7LiveKit14TextStreamInfo")
@interface TextStreamInfo : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSString * _Nonnull topic;
@property (nonatomic, readonly, copy) NSDate * _Nonnull timestamp;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nonnull attributes;
@property (nonatomic, readonly) enum TextStreamInfoOperationType operationType;
@property (nonatomic, readonly) NSInteger version;
@property (nonatomic, readonly, copy) NSString * _Nullable replyToStreamID;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull attachedStreamIDs;
@property (nonatomic, readonly) BOOL generated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TextStreamInfoOperationType, "OperationType", closed) {
  TextStreamInfoOperationTypeCreate = 0,
  TextStreamInfoOperationTypeUpdate = 1,
  TextStreamInfoOperationTypeDelete = 2,
  TextStreamInfoOperationTypeReaction = 3,
};

/// An asynchronous sequence of chunks read from a text data stream.
SWIFT_CLASS("_TtC7LiveKit16TextStreamReader")
@interface TextStreamReader : NSObject
/// Information about the incoming text stream.
@property (nonatomic, readonly, strong) TextStreamInfo * _Nonnull info;
/// Reads incoming chunks from the text stream, concatenating them into a single string which is returned
/// once the stream closes normally.
///
/// throws:
/// <code>StreamError</code> if an error occurs while reading the stream.
///
/// returns:
/// The string consisting of all concatenated chunks.
- (void)readAllWithCompletionHandler:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface TextStreamReader (SWIFT_EXTENSION(LiveKit))
- (void)readChunksOnChunk:(void (^ _Nonnull)(NSString * _Nonnull))onChunk onCompletion:(void (^ _Nullable)(NSError * _Nullable))onCompletion SWIFT_DEPRECATED_MSG("Use for/await on TextStreamReader reader instead.");
@end

/// Asynchronously write to an open text stream.
SWIFT_CLASS("_TtC7LiveKit16TextStreamWriter")
@interface TextStreamWriter : NSObject
/// Information about the outgoing text stream.
@property (nonatomic, readonly, strong) TextStreamInfo * _Nonnull info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface TextStreamWriter (SWIFT_EXTENSION(LiveKit))
- (void)write:(NSString * _Nonnull)text onCompletion:(void (^ _Nonnull)(NSError * _Nullable))onCompletion SWIFT_UNAVAILABLE_MSG("Use async write(_:) method instead.");
- (void)closeWithReason:(NSString * _Nullable)reason onCompletion:(void (^ _Nonnull)(NSError * _Nullable))onCompletion SWIFT_UNAVAILABLE_MSG("Use async close(reason:) method instead.");
@end

@interface Track (SWIFT_EXTENSION(LiveKit))
@end

SWIFT_CLASS_NAMED("Sid")
@interface TrackSid : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull stringValue;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface Track (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@interface Track (SWIFT_EXTENSION(LiveKit))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@end

@protocol TrackDelegate;
@interface Track (SWIFT_EXTENSION(LiveKit))
- (void)addDelegate:(id <TrackDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <TrackDelegate> _Nonnull)delegate;
- (void)removeAllDelegates;
@end

SWIFT_PROTOCOL("_TtP7LiveKit13TrackDelegate_")
@protocol TrackDelegate
@optional
/// Dimensions of the video track has updated
- (void)track:(id <VideoTrack> _Nonnull)track didUpdateDimensions:(Dimensions * _Nullable)dimensions;
/// Statistics for the track has been generated (v2).
- (void)track:(Track * _Nonnull)track didUpdateStatistics:(TrackStatistics * _Nonnull)didUpdateStatistics simulcastStatistics:(NSDictionary<VideoCodec *, TrackStatistics *> * _Nonnull)simulcastStatistics;
@end

@interface TrackPublication (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@interface TrackPublication (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7LiveKit15TrackStatistics")
@interface TrackStatistics : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface TrackStatistics (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

SWIFT_CLASS("_TtC7LiveKit20TranscriptionSegment")
@interface TranscriptionSegment : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit19TransportStatistics")
@interface TransportStatistics : Statistics
@end

@interface VideoCapturer (SWIFT_EXTENSION(LiveKit))
- (void)addDelegate:(id <VideoCapturerDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <VideoCapturerDelegate> _Nonnull)delegate;
- (void)removeAllDelegates;
@end

SWIFT_CLASS("_TtC7LiveKit10VideoCodec")
@interface VideoCodec : NSObject
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit13VideoEncoding")
@interface VideoEncoding : NSObject <MediaEncoding>
@property (nonatomic, readonly) NSInteger maxBitrate;
@property (nonatomic, readonly) NSInteger maxFps;
- (nonnull instancetype)initWithMaxBitrate:(NSInteger)maxBitrate maxFps:(NSInteger)maxFps OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit10VideoFrame")
@interface VideoFrame : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

SWIFT_CLASS("_TtC7LiveKit15VideoParameters")
@interface VideoParameters : NSObject
@property (nonatomic, readonly, strong) Dimensions * _Nonnull dimensions;
@property (nonatomic, readonly, strong) VideoEncoding * _Nonnull encoding;
- (nonnull instancetype)initWithDimensions:(Dimensions * _Nonnull)dimensions encoding:(VideoEncoding * _Nonnull)encoding OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@interface VideoParameters (SWIFT_EXTENSION(LiveKit))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH90_169;)
+ (VideoParameters * _Nonnull)presetH90_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH180_169;)
+ (VideoParameters * _Nonnull)presetH180_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH216_169;)
+ (VideoParameters * _Nonnull)presetH216_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH360_169;)
+ (VideoParameters * _Nonnull)presetH360_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH540_169;)
+ (VideoParameters * _Nonnull)presetH540_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH720_169;)
+ (VideoParameters * _Nonnull)presetH720_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH1080_169;)
+ (VideoParameters * _Nonnull)presetH1080_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH1440_169;)
+ (VideoParameters * _Nonnull)presetH1440_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH2160_169;)
+ (VideoParameters * _Nonnull)presetH2160_169 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH120_43;)
+ (VideoParameters * _Nonnull)presetH120_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH180_43;)
+ (VideoParameters * _Nonnull)presetH180_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH240_43;)
+ (VideoParameters * _Nonnull)presetH240_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH360_43;)
+ (VideoParameters * _Nonnull)presetH360_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH480_43;)
+ (VideoParameters * _Nonnull)presetH480_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH540_43;)
+ (VideoParameters * _Nonnull)presetH540_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH720_43;)
+ (VideoParameters * _Nonnull)presetH720_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH1080_43;)
+ (VideoParameters * _Nonnull)presetH1080_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetH1440_43;)
+ (VideoParameters * _Nonnull)presetH1440_43 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetScreenShareH360FPS3;)
+ (VideoParameters * _Nonnull)presetScreenShareH360FPS3 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetScreenShareH720FPS5;)
+ (VideoParameters * _Nonnull)presetScreenShareH720FPS5 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetScreenShareH720FPS15;)
+ (VideoParameters * _Nonnull)presetScreenShareH720FPS15 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetScreenShareH1080FPS15;)
+ (VideoParameters * _Nonnull)presetScreenShareH1080FPS15 SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) VideoParameters * _Nonnull presetScreenShareH1080FPS30;)
+ (VideoParameters * _Nonnull)presetScreenShareH1080FPS30 SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_CLASS("_TtC7LiveKit19VideoPublishOptions")
@interface VideoPublishOptions : NSObject <TrackPublishOptions>
@property (nonatomic, readonly, copy) NSString * _Nullable name;
/// preferred encoding parameters
@property (nonatomic, readonly, strong) VideoEncoding * _Nullable encoding;
/// encoding parameters for for screen share
@property (nonatomic, readonly, strong) VideoEncoding * _Nullable screenShareEncoding;
/// true to enable simulcasting, publishes three tracks at different sizes
@property (nonatomic, readonly) BOOL simulcast;
@property (nonatomic, readonly, copy) NSArray<VideoParameters *> * _Nonnull simulcastLayers;
@property (nonatomic, readonly, copy) NSArray<VideoParameters *> * _Nonnull screenShareSimulcastLayers;
@property (nonatomic, readonly, strong) VideoCodec * _Nullable preferredCodec;
@property (nonatomic, readonly, strong) VideoCodec * _Nullable preferredBackupCodec;
@property (nonatomic, readonly) enum DegradationPreference degradationPreference;
@property (nonatomic, readonly, copy) NSString * _Nullable streamName;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, VideoQuality, closed) {
  VideoQualityLow = 0,
  VideoQualityMedium = 1,
  VideoQualityHigh = 2,
};

SWIFT_PROTOCOL("_TtP7LiveKit13VideoRenderer_")
@protocol VideoRenderer
/// Whether this <code>VideoRenderer</code> should be considered visible or not for AdaptiveStream.
/// This will be invoked on the .main thread.
@property (nonatomic, readonly) BOOL isAdaptiveStreamEnabled;
/// The size used for AdaptiveStream computation. Return .zero if size is unknown yet.
/// This will be invoked on the .main thread.
@property (nonatomic, readonly) CGSize adaptiveStreamSize;
@optional
/// Size of the frame.
- (void)setWithSize:(CGSize)size;
/// A <code>VideoFrame</code> is ready and should be processed.
- (void)renderWithFrame:(VideoFrame * _Nonnull)frame;
/// In addition to <code>VideoFrame</code>, provide capture-time information if available.
- (void)renderWithFrame:(VideoFrame * _Nonnull)frame captureDevice:(AVCaptureDevice * _Nullable)captureDevice captureOptions:(id <VideoCaptureOptions> _Nullable)captureOptions;
@end

SWIFT_CLASS("_TtC7LiveKit21VideoSourceStatistics")
@interface VideoSourceStatistics : MediaSourceStatistics
@end

enum LayoutMode : NSInteger;
enum MirrorMode : NSInteger;
enum RenderMode : NSInteger;
enum TransitionMode : NSInteger;
SWIFT_CLASS("_TtC7LiveKit9VideoView")
@interface VideoView : NativeView
/// <code>LayoutMode-swift.enum</code> of the <code>VideoView</code>.
@property (nonatomic) enum LayoutMode layoutMode;
/// Flips the video horizontally, useful for local VideoViews.
@property (nonatomic) enum MirrorMode mirrorMode;
@property (nonatomic) enum RenderMode renderMode;
/// Calls addRenderer and/or removeRenderer internally for convenience.
@property (nonatomic, weak) id <VideoTrack> _Nullable track;
/// If set to false, rendering will be paused temporarily. Useful for performance optimizations with UICollectionViewCell etc.
@property (nonatomic) BOOL isEnabled;
@property (nonatomic, getter=isHidden) BOOL hidden;
/// Currently, only for iOS
@property (nonatomic) enum TransitionMode transitionMode;
@property (nonatomic) NSTimeInterval transitionDuration;
@property (nonatomic) BOOL isPinchToZoomEnabled;
@property (nonatomic) BOOL isAutoZoomResetEnabled;
@property (nonatomic) BOOL isDebugMode;
@property (nonatomic, readonly) BOOL isRendering;
@property (nonatomic, readonly) BOOL didRenderFirstFrame;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

/// Specifies how to render the video withing the <code>VideoView</code>’s bounds.
typedef SWIFT_ENUM(NSInteger, LayoutMode, closed) {
/// Video will be fully visible within the <code>VideoView</code>.
  LayoutModeFit = 0,
/// Video will fully cover up the <code>VideoView</code>.
  LayoutModeFill = 1,
};

typedef SWIFT_ENUM(NSInteger, MirrorMode, closed) {
/// Will mirror if the track is a front facing camera track.
  MirrorModeAuto = 0,
  MirrorModeOff = 1,
  MirrorModeMirror = 2,
};

typedef SWIFT_ENUM(NSInteger, RenderMode, closed) {
  RenderModeAuto = 0,
  RenderModeMetal = 1,
  RenderModeSampleBuffer = 2,
};

typedef SWIFT_ENUM(NSInteger, TransitionMode, closed) {
  TransitionModeNone = 0,
  TransitionModeCrossDissolve = 1,
  TransitionModeFlip = 2,
};

@interface VideoView (SWIFT_EXTENSION(LiveKit))
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@protocol VideoViewDelegate;
@interface VideoView (SWIFT_EXTENSION(LiveKit))
- (void)addDelegate:(id <VideoViewDelegate> _Nonnull)delegate;
- (void)removeDelegate:(id <VideoViewDelegate> _Nonnull)delegate;
- (void)removeAllDelegates;
@end

@interface VideoView (SWIFT_EXTENSION(LiveKit)) <VideoRenderer>
@property (nonatomic, readonly) BOOL isAdaptiveStreamEnabled;
@property (nonatomic, readonly) CGSize adaptiveStreamSize;
- (void)setWithSize:(CGSize)size;
- (void)renderWithFrame:(VideoFrame * _Nonnull)frame captureDevice:(AVCaptureDevice * _Nullable)captureDevice captureOptions:(id <VideoCaptureOptions> _Nullable)captureOptions;
@end

SWIFT_PROTOCOL("_TtP7LiveKit17VideoViewDelegate_")
@protocol VideoViewDelegate
@optional
/// Dimensions of the VideoView itself has updated
- (void)videoView:(VideoView * _Nonnull)videoView didUpdateSize:(CGSize)size;
/// VideoView updated the isRendering property
- (void)videoView:(VideoView * _Nonnull)videoView didUpdateIsRendering:(BOOL)isRendering;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
